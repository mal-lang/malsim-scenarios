Assets:
- associations:
  - - SysExecution
    - hostHardware
    - sysExecutedApps
  - - ZoneInclusion
    - physicalZones
    - hardwareSystems
  - - DataHosting
    - hostedData
    - hardware
  - - HardwareAccess
    - users
    - hardwareSystems
  - - hardwareVulnerability
    - vulnerabilities
    - hardware
  attack_steps:
  - attemptUseVulnerabilityFromPhysicalAccess
  - successfulUseVulnerabilityFromPhysicalAccess
  - attemptUseVulnerabilityFromSoftwareFullAccess
  - useVulnerability
  - attemptSpreadWormThroughRemovableMedia
  - successfulSpreadWormThroughRemovableMedia
  - spreadWormThroughRemovableMedia
  - fullAccess
  - attemptSupplyChainAttack
  - successfulSupplyChainAttack
  - supplyChainAttack
  - supplyChainAuditing
  - bypassSupplyChainAuditing
  - supplyChainAuditingBypassed
  - physicalAccess
  - attemptHardwareModifications
  - successfulHardwareModifications
  - hardwareModifications
  - hardwareModificationsProtection
  - bypassHardwareModificationsProtection
  - hardwareModificationsProtectionBypassed
  - attemptUnsafeUserActivity
  - successfulUnsafeUserActivity
  - unsafeUserActivity
  - deny
  - read
  - modify
  description:
    user: Specifies the hardware on which applications can run.
  name: Hardware
  sub_assets: []
  super_assets: []
- associations:
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - AppSoftwareProduct
    - appSoftProduct
    - softApplications
  - - ApplicationVulnerability
    - softProductVulnerabilities
    - softwareProduct
  attack_steps:
  - read
  - write
  - delete
  - deny
  - extract
  - attemptReadFromReplica
  - attemptWriteFromReplica
  - attemptDeleteFromReplica
  - attemptDenyFromReplica
  - attemptExtractFromReplica
  - compromiseApplications
  - readApplications
  - modifyApplications
  - denyApplications
  description:
    developer: This asset was introduced in order to improve the usability of the
      language and enable software supply chain attacks.
    user: A software product that certain applications are using which represents
      a specific software package, potentially even a version, which can be associated
      with certain vulnerabilities or have its deployment repositories compromised
      in a software supply chain attack.
  name: SoftwareProduct
  sub_assets: []
  super_assets:
  - Information
- associations:
  - - SysExecution
    - hostHardware
    - sysExecutedApps
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - AppSoftwareProduct
    - appSoftProduct
    - softApplications
  - - AppExecution
    - hostApp
    - appExecutedApps
  - - AppProtection
    - protectorIDPSs
    - protectedApps
  - - AppContainment
    - containedData
    - containingApp
  - - SendData
    - sentData
    - senderApp
  - - ReceiveData
    - receivedData
    - receiverApp
  - - Dependence
    - dataDependedUpon
    - dependentApps
  - - ExecutionPrivilegeAccess
    - executionPrivIAMs
    - execPrivApps
  - - HighPrivilegeApplicationAccess
    - highPrivAppIAMs
    - highPrivApps
  - - LowPrivilegeApplicationAccess
    - lowPrivAppIAMs
    - lowPrivApps
  - - ManagedBy
    - managedRoutingFw
    - managerApp
  - - NetworkExposure
    - networks
    - applications
  - - ApplicationConnection
    - applications
    - appConnections
  - - InApplicationConnection
    - inApplications
    - ingoingAppConnections
  - - OutApplicationConnection
    - outApplications
    - outgoingAppConnections
  - - ApplicationVulnerability
    - vulnerabilities
    - application
  attack_steps:
  - notPresent
  - attemptUseVulnerability
  - successfulUseVulnerability
  - useVulnerability
  - attemptReverseReach
  - successfulReverseReach
  - reverseReach
  - localConnect
  - networkConnectUninspected
  - networkConnectInspected
  - networkConnect
  - specificAccessNetworkConnect
  - accessNetworkAndConnections
  - attemptNetworkConnectFromResponse
  - networkConnectFromResponse
  - specificAccessFromLocalConnection
  - specificAccessFromNetworkConnection
  - specificAccess
  - bypassContainerization
  - authenticate
  - specificAccessAuthenticate
  - localAccess
  - networkAccess
  - fullAccess
  - physicalAccessAchieved
  - attemptUnsafeUserActivity
  - successfulUnsafeUserActivity
  - unsafeUserActivity
  - attackerUnsafeUserActivityCapability
  - attackerUnsafeUserActivityCapabilityWithReverseReach
  - attackerUnsafeUserActivityCapabilityWithoutReverseReach
  - supplyChainAuditing
  - bypassSupplyChainAuditing
  - supplyChainAuditingBypassed
  - attemptFullAccessFromSupplyChainCompromise
  - fullAccessFromSupplyChainCompromise
  - attemptReadFromSoftProdVulnerability
  - attemptModifyFromSoftProdVulnerability
  - attemptDenyFromSoftProdVulnerability
  - softwareCheck
  - softwareProductVulnerabilityLocalAccessAchieved
  - softwareProductVulnerabilityNetworkAccessAchieved
  - softwareProductVulnerabilityPhysicalAccessAchieved
  - softwareProductVulnerabilityLowPrivilegesAchieved
  - softwareProductVulnerabilityHighPrivilegesAchieved
  - softwareProductVulnerabilityUserInteractionAchieved
  - attemptSoftwareProductAbuse
  - softwareProductAbuse
  - readFromSoftProdVulnerability
  - modifyFromSoftProdVulnerability
  - denyFromSoftProdVulnerability
  - attemptApplicationRespondConnectThroughData
  - successfulApplicationRespondConnectThroughData
  - applicationRespondConnectThroughData
  - attemptAuthorizedApplicationRespondConnectThroughData
  - successfulAuthorizedApplicationRespondConnectThroughData
  - authorizedApplicationRespondConnectThroughData
  - attemptRead
  - successfulRead
  - read
  - specificAccessRead
  - attemptModify
  - successfulModify
  - modify
  - specificAccessModify
  - attemptDeny
  - successfulDeny
  - deny
  - specificAccessDelete
  - denyFromNetworkingAsset
  - denyFromLockout
  description:
    modeler: Applications are some of the most common assets in models due to their
      versatility and scope.
    user: An application models any type of software process or component, from firmware
      and operating systems to plugins and sessions.
  name: Application
  sub_assets:
  - IDPS
  - RoutingFirewall
  super_assets: []
- associations:
  - - SysExecution
    - hostHardware
    - sysExecutedApps
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - AppSoftwareProduct
    - appSoftProduct
    - softApplications
  - - AppExecution
    - hostApp
    - appExecutedApps
  - - AppProtection
    - protectorIDPSs
    - protectedApps
  - - AppContainment
    - containedData
    - containingApp
  - - SendData
    - sentData
    - senderApp
  - - ReceiveData
    - receivedData
    - receiverApp
  - - Dependence
    - dataDependedUpon
    - dependentApps
  - - ExecutionPrivilegeAccess
    - executionPrivIAMs
    - execPrivApps
  - - HighPrivilegeApplicationAccess
    - highPrivAppIAMs
    - highPrivApps
  - - LowPrivilegeApplicationAccess
    - lowPrivAppIAMs
    - lowPrivApps
  - - ManagedBy
    - managedRoutingFw
    - managerApp
  - - NetworkExposure
    - networks
    - applications
  - - ApplicationConnection
    - applications
    - appConnections
  - - InApplicationConnection
    - inApplications
    - ingoingAppConnections
  - - OutApplicationConnection
    - outApplications
    - outgoingAppConnections
  - - ApplicationVulnerability
    - vulnerabilities
    - application
  attack_steps:
  - notPresent
  - attemptUseVulnerability
  - successfulUseVulnerability
  - useVulnerability
  - attemptReverseReach
  - successfulReverseReach
  - reverseReach
  - localConnect
  - networkConnectUninspected
  - networkConnectInspected
  - networkConnect
  - specificAccessNetworkConnect
  - accessNetworkAndConnections
  - attemptNetworkConnectFromResponse
  - networkConnectFromResponse
  - specificAccessFromLocalConnection
  - specificAccessFromNetworkConnection
  - specificAccess
  - bypassContainerization
  - authenticate
  - specificAccessAuthenticate
  - localAccess
  - networkAccess
  - fullAccess
  - physicalAccessAchieved
  - attemptUnsafeUserActivity
  - successfulUnsafeUserActivity
  - unsafeUserActivity
  - attackerUnsafeUserActivityCapability
  - attackerUnsafeUserActivityCapabilityWithReverseReach
  - attackerUnsafeUserActivityCapabilityWithoutReverseReach
  - supplyChainAuditing
  - bypassSupplyChainAuditing
  - supplyChainAuditingBypassed
  - attemptFullAccessFromSupplyChainCompromise
  - fullAccessFromSupplyChainCompromise
  - attemptReadFromSoftProdVulnerability
  - attemptModifyFromSoftProdVulnerability
  - attemptDenyFromSoftProdVulnerability
  - softwareCheck
  - softwareProductVulnerabilityLocalAccessAchieved
  - softwareProductVulnerabilityNetworkAccessAchieved
  - softwareProductVulnerabilityPhysicalAccessAchieved
  - softwareProductVulnerabilityLowPrivilegesAchieved
  - softwareProductVulnerabilityHighPrivilegesAchieved
  - softwareProductVulnerabilityUserInteractionAchieved
  - attemptSoftwareProductAbuse
  - softwareProductAbuse
  - readFromSoftProdVulnerability
  - modifyFromSoftProdVulnerability
  - denyFromSoftProdVulnerability
  - attemptApplicationRespondConnectThroughData
  - successfulApplicationRespondConnectThroughData
  - applicationRespondConnectThroughData
  - attemptAuthorizedApplicationRespondConnectThroughData
  - successfulAuthorizedApplicationRespondConnectThroughData
  - authorizedApplicationRespondConnectThroughData
  - attemptRead
  - successfulRead
  - read
  - specificAccessRead
  - attemptModify
  - successfulModify
  - modify
  - specificAccessModify
  - attemptDeny
  - successfulDeny
  - deny
  - specificAccessDelete
  - denyFromNetworkingAsset
  - denyFromLockout
  - effectiveness
  - bypassEffectiveness
  - effectivenessBypassed
  description:
    user: An IDPS(Intrusion Detection and Prevention System) is tasked with protecting
      other applications from malicious activity, such as exploiting vulnerabilities
      or unsafe user actions.
  name: IDPS
  sub_assets: []
  super_assets:
  - Application
- associations:
  - - ZoneInclusion
    - physicalZones
    - hardwareSystems
  - - ZoneInclusion
    - physicalZones
    - networks
  - - ZoneAccess
    - users
    - physicalZones
  attack_steps:
  - gainPhysicalAccess
  description:
    user: A physical zone is the location where hardware systems and networks are
      physically deployed.
  name: PhysicalZone
  sub_assets: []
  super_assets: []
- associations:
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - Dependence
    - infoDependedUpon
    - dependentApps
  attack_steps:
  - read
  - write
  - delete
  - deny
  - extract
  - attemptReadFromReplica
  - attemptWriteFromReplica
  - attemptDeleteFromReplica
  - attemptDenyFromReplica
  - attemptExtractFromReplica
  description:
    user: Represents any type of information that might be contained inside Data.
      This include general purpose information, but also serves as the basis for more
      specialized types, such as Credentials and SoftwareProduct. Information represents
      the abstract concept, while Data represent an actual instance of information
      stored or transmitted digitally.
  name: Information
  sub_assets:
  - SoftwareProduct
  - IAMObject
  - Credentials
  super_assets: []
- associations:
  - - DataHosting
    - hostedData
    - hardware
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - AppContainment
    - containedData
    - containingApp
  - - SendData
    - sentData
    - senderApp
  - - ReceiveData
    - receivedData
    - receiverApp
  - - Dependence
    - dataDependedUpon
    - dependentApps
  - - DataContainment
    - containingData
    - containedData
  - - DataInTransit
    - transitData
    - transitNetwork
  - - EncryptionCredentials
    - encryptCreds
    - encryptedData
  - - SigningCredentials
    - signingCreds
    - signedData
  - - ReadPrivileges
    - readingIAMs
    - readPrivData
  - - WritePrivileges
    - writingIAMs
    - writePrivData
  - - DeletePrivileges
    - deletingIAMs
    - deletePrivData
  attack_steps:
  - notPresent
  - authorizedAccessFromApplication
  - dataEncrypted
  - dataSigned
  - payloadInspectionBypassFromEncryptedData
  - bypassPayloadInspectionFromEncryptedData
  - accessUnencryptedData
  - accessUnsignedData
  - accessSpoofedData
  - accessDecryptedData
  - attemptApplicationRespondConnect
  - applicationRespondConnect
  - authorizedApplicationRespondConnectFromApplication
  - authorizedApplicationRespondConnectFromIAM
  - authorizedApplicationRespondConnect
  - attemptRead
  - successfulRead
  - read
  - authorizedReadFromIAM
  - authorizedReadFromApplication
  - authorizedRead
  - attemptWrite
  - successfulWrite
  - write
  - authorizedWriteFromIAM
  - authorizedWriteFromApplication
  - authorizedWrite
  - attemptDelete
  - successfulDelete
  - delete
  - authorizedDeleteFromIAM
  - authorizedDeleteFromApplication
  - authorizedDelete
  - attemptDeny
  - successfulDeny
  - deny
  - denyFromLockout
  - attemptReverseReach
  - reverseReach
  - extract
  description:
    user: Any form of data that can be stored or transmitted.
  name: Data
  sub_assets: []
  super_assets: []
- associations:
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - ExecutionPrivilegeAccess
    - executionPrivIAMs
    - execPrivApps
  - - HighPrivilegeApplicationAccess
    - highPrivAppIAMs
    - highPrivApps
  - - LowPrivilegeApplicationAccess
    - lowPrivAppIAMs
    - lowPrivApps
  - - ReadPrivileges
    - readingIAMs
    - readPrivData
  - - WritePrivileges
    - writingIAMs
    - writePrivData
  - - DeletePrivileges
    - deletingIAMs
    - deletePrivData
  - - HasPrivileges
    - IAMOwners
    - subprivileges
  - - AccountManagement
    - managers
    - managedIAMs
  attack_steps:
  - read
  - write
  - delete
  - deny
  - extract
  - attemptReadFromReplica
  - attemptWriteFromReplica
  - attemptDeleteFromReplica
  - attemptDenyFromReplica
  - attemptExtractFromReplica
  - notPresent
  - attemptAssume
  - successfulAssume
  - assume
  - attemptLockout
  - successfulLockout
  - lockout
  description:
    user: An IAM object represents the base logic shared by all assets used for Identity
      and Access Management roles(Identity, Group, Privileges).
  name: IAMObject
  sub_assets:
  - Identity
  - Privileges
  - Group
  super_assets:
  - Information
- associations:
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - ExecutionPrivilegeAccess
    - executionPrivIAMs
    - execPrivApps
  - - HighPrivilegeApplicationAccess
    - highPrivAppIAMs
    - highPrivApps
  - - LowPrivilegeApplicationAccess
    - lowPrivAppIAMs
    - lowPrivApps
  - - ReadPrivileges
    - readingIAMs
    - readPrivData
  - - WritePrivileges
    - writingIAMs
    - writePrivData
  - - DeletePrivileges
    - deletingIAMs
    - deletePrivData
  - - HasPrivileges
    - IAMOwners
    - subprivileges
  - - AccountManagement
    - managers
    - managedIAMs
  - - IdentityCredentials
    - identities
    - credentials
  - - CanAssume
    - parentId
    - childId
  - - MemberOf
    - memberOf
    - groupIds
  - - UserAssignedIdentities
    - users
    - userIds
  attack_steps:
  - read
  - write
  - delete
  - deny
  - extract
  - attemptReadFromReplica
  - attemptWriteFromReplica
  - attemptDeleteFromReplica
  - attemptDenyFromReplica
  - attemptExtractFromReplica
  - notPresent
  - attemptAssume
  - successfulAssume
  - assume
  - attemptLockout
  - successfulLockout
  - lockout
  - lockoutFromCredentials
  - missingUser
  - attemptUnsafeUserActivity
  - successfulUnsafeUserActivity
  - unsafeUserActivity
  description:
    developer: An identity can be visualised as a group of assumable roles that can
      be associated with many credentials.
    user: An identity models an IAM identity that should then be associated with privileges
      on other instances.
  name: Identity
  sub_assets: []
  super_assets:
  - IAMObject
- associations:
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - ExecutionPrivilegeAccess
    - executionPrivIAMs
    - execPrivApps
  - - HighPrivilegeApplicationAccess
    - highPrivAppIAMs
    - highPrivApps
  - - LowPrivilegeApplicationAccess
    - lowPrivAppIAMs
    - lowPrivApps
  - - ReadPrivileges
    - readingIAMs
    - readPrivData
  - - WritePrivileges
    - writingIAMs
    - writePrivData
  - - DeletePrivileges
    - deletingIAMs
    - deletePrivData
  - - HasPrivileges
    - IAMOwners
    - subprivileges
  - - AccountManagement
    - managers
    - managedIAMs
  attack_steps:
  - read
  - write
  - delete
  - deny
  - extract
  - attemptReadFromReplica
  - attemptWriteFromReplica
  - attemptDeleteFromReplica
  - attemptDenyFromReplica
  - attemptExtractFromReplica
  - notPresent
  - attemptAssume
  - successfulAssume
  - assume
  - attemptLockout
  - successfulLockout
  - lockout
  - attemptUnsafeUserActivity
  - successfulUnsafeUserActivity
  - unsafeUserActivity
  description:
    modeler: The privileges asset is not meant to be used normally when assigning
      permissions. Identities and Groups should be directly associated with the relevant
      assets. The purpose of the Privileges asset is to be used as a speculative asset
      when reasoning about additional privileges that a particular Group or Identity
      may have as a result of either poor configurations or the attacker's actions.
    user: A privileges asset can be associated with another IAMObject to reason about
      a specific subset of given privileges on Applications and Data.
  name: Privileges
  sub_assets: []
  super_assets:
  - IAMObject
- associations:
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - ExecutionPrivilegeAccess
    - executionPrivIAMs
    - execPrivApps
  - - HighPrivilegeApplicationAccess
    - highPrivAppIAMs
    - highPrivApps
  - - LowPrivilegeApplicationAccess
    - lowPrivAppIAMs
    - lowPrivApps
  - - ReadPrivileges
    - readingIAMs
    - readPrivData
  - - WritePrivileges
    - writingIAMs
    - writePrivData
  - - DeletePrivileges
    - deletingIAMs
    - deletePrivData
  - - HasPrivileges
    - IAMOwners
    - subprivileges
  - - AccountManagement
    - managers
    - managedIAMs
  - - MemberOf
    - memberOf
    - groupIds
  - - MemberOf
    - parentGroup
    - childGroups
  attack_steps:
  - read
  - write
  - delete
  - deny
  - extract
  - attemptReadFromReplica
  - attemptWriteFromReplica
  - attemptDeleteFromReplica
  - attemptDenyFromReplica
  - attemptExtractFromReplica
  - notPresent
  - attemptAssume
  - successfulAssume
  - assume
  - attemptLockout
  - successfulLockout
  - lockout
  - lockoutFromMembers
  description:
    modeler: Groups can be used instead of nested identities to make the model more
      intuitive and clearer to understand.
    user: A group is a way to group together identities and/or other groups. This
      allows the expression of hierarchical IAM (structured inheritance).
  name: Group
  sub_assets: []
  super_assets:
  - IAMObject
- associations:
  - - InfoContainment
    - containerData
    - information
  - - Replica
    - dataReplicas
    - replicatedInformation
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - EncryptionCredentials
    - encryptCreds
    - encryptedData
  - - SigningCredentials
    - signingCreds
    - signedData
  - - IdentityCredentials
    - identities
    - credentials
  - - HashedCredentials
    - hashes
    - origCreds
  - - ConditionalAuthentication
    - credentials
    - requiredFactors
  attack_steps:
  - read
  - write
  - delete
  - deny
  - extract
  - attemptReadFromReplica
  - attemptWriteFromReplica
  - attemptDeleteFromReplica
  - attemptDenyFromReplica
  - attemptExtractFromReplica
  - notDisclosed
  - notGuessable
  - unique
  - notPhishable
  - useLeakedCredentials
  - attemptCredentialsReuse
  - credentialsReuse
  - attemptUse
  - use
  - attemptPropagateOneCredentialCompromised
  - propagateOneCredentialCompromised
  - attemptCredentialTheft
  - credentialTheft
  - missingIdentity
  - weakCredentials
  - credsHashed
  - guessCredentialsFromHash
  - guessCredentials
  description:
    modeler: Credentials represent a variety of access control mechanism(e.g. username
      and password pair, keycards, biometric data).
    user: Credentials can be used to get access to an Identity, but they can also
      be used as an encryption/signing key for Data.
  name: Credentials
  sub_assets: []
  super_assets:
  - Information
- associations:
  - - HardwareAccess
    - users
    - hardwareSystems
  - - ZoneAccess
    - users
    - physicalZones
  - - UserAssignedIdentities
    - users
    - userIds
  attack_steps:
  - noPasswordReuse
  - noRemovableMediaUsage
  - securityAwareness
  - bypassSecurityAwareness
  - securityAwarenessBypassed
  - oneCredentialCompromised
  - passwordReuseCompromise
  - weakCredentials
  - attemptSocialEngineering
  - successfulSocialEngineering
  - socialEngineering
  - attemptDeliverMaliciousRemovableMedia
  - successfulDeliverMaliciousRemovableMedia
  - deliverMaliciousRemovableMedia
  - credentialTheft
  - unsafeUserActivity
  description:
    user: This asset represents the user themselves. It is the suitable attack surface
      for social engineering attacks.
  name: User
  sub_assets: []
  super_assets: []
- associations:
  - - NetworkExposure
    - networks
    - applications
  - - ZoneInclusion
    - physicalZones
    - networks
  - - DataInTransit
    - transitData
    - transitNetwork
  - - NetworkConnection
    - networks
    - netConnections
  - - InNetworkConnection
    - inNetworks
    - ingoingNetConnections
  - - OutNetworkConnection
    - outNetworks
    - outgoingNetConnections
  - - DiodeInNetworkConnection
    - diodeInNetworks
    - diodeIngoingNetConnections
  attack_steps:
  - physicalAccess
  - bypassEavesdropDefenseFromPhysicalAccess
  - bypassAdversaryInTheMiddleDefenseFromPhysicalAccess
  - networkAccessControl
  - bypassAccessControl
  - accessControlBypassed
  - attemptAccessUninspectedFromPhysicalAccess
  - attemptAccessInspectedFromPhysicalAccess
  - successfulAccessUninspectedFromPhysicalAccess
  - successfulAccessInspectedFromPhysicalAccess
  - accessUninspected
  - accessInspected
  - attemptReverseReach
  - reverseReach
  - networkForwardingUninspected
  - networkForwardingInspected
  - deny
  - accessNetworkData
  - eavesdropDefense
  - bypassEavesdropDefense
  - eavesdropDefenseBypassed
  - attemptEavesdrop
  - successfulEavesdrop
  - eavesdrop
  - adversaryInTheMiddleDefense
  - bypassAdversaryInTheMiddleDefense
  - adversaryInTheMiddleDefenseBypassed
  - attemptAdversaryInTheMiddle
  - successfulAdversaryInTheMiddle
  - adversaryInTheMiddle
  description:
    developer: The network asset tries to cover all the levels of the OSI stack in
      a very abstract and compact way (i.e. it tries to represent all the OSI layers).
      For example it will try to cover both ARP attacks (that are Level 2) but also
      DNS/HTTP spoofing attacks (that are Level 7).
    user: A network (zone) is a set of network accessible applications and data.
  name: Network
  sub_assets: []
  super_assets: []
- associations:
  - - SysExecution
    - hostHardware
    - sysExecutedApps
  - - Dependence
    - infoDependedUpon
    - dependentApps
  - - AppSoftwareProduct
    - appSoftProduct
    - softApplications
  - - AppExecution
    - hostApp
    - appExecutedApps
  - - AppProtection
    - protectorIDPSs
    - protectedApps
  - - AppContainment
    - containedData
    - containingApp
  - - SendData
    - sentData
    - senderApp
  - - ReceiveData
    - receivedData
    - receiverApp
  - - Dependence
    - dataDependedUpon
    - dependentApps
  - - ExecutionPrivilegeAccess
    - executionPrivIAMs
    - execPrivApps
  - - HighPrivilegeApplicationAccess
    - highPrivAppIAMs
    - highPrivApps
  - - LowPrivilegeApplicationAccess
    - lowPrivAppIAMs
    - lowPrivApps
  - - ManagedBy
    - managedRoutingFw
    - managerApp
  - - NetworkExposure
    - networks
    - applications
  - - ApplicationConnection
    - applications
    - appConnections
  - - InApplicationConnection
    - inApplications
    - ingoingAppConnections
  - - OutApplicationConnection
    - outApplications
    - outgoingAppConnections
  - - ApplicationVulnerability
    - vulnerabilities
    - application
  - - FirewallConnectionRule
    - routingFirewalls
    - connectionRules
  attack_steps:
  - notPresent
  - attemptUseVulnerability
  - successfulUseVulnerability
  - useVulnerability
  - attemptReverseReach
  - successfulReverseReach
  - reverseReach
  - localConnect
  - networkConnectUninspected
  - networkConnectInspected
  - networkConnect
  - specificAccessNetworkConnect
  - accessNetworkAndConnections
  - attemptNetworkConnectFromResponse
  - networkConnectFromResponse
  - specificAccessFromLocalConnection
  - specificAccessFromNetworkConnection
  - specificAccess
  - bypassContainerization
  - authenticate
  - specificAccessAuthenticate
  - localAccess
  - networkAccess
  - fullAccess
  - physicalAccessAchieved
  - attemptUnsafeUserActivity
  - successfulUnsafeUserActivity
  - unsafeUserActivity
  - attackerUnsafeUserActivityCapability
  - attackerUnsafeUserActivityCapabilityWithReverseReach
  - attackerUnsafeUserActivityCapabilityWithoutReverseReach
  - supplyChainAuditing
  - bypassSupplyChainAuditing
  - supplyChainAuditingBypassed
  - attemptFullAccessFromSupplyChainCompromise
  - fullAccessFromSupplyChainCompromise
  - attemptReadFromSoftProdVulnerability
  - attemptModifyFromSoftProdVulnerability
  - attemptDenyFromSoftProdVulnerability
  - softwareCheck
  - softwareProductVulnerabilityLocalAccessAchieved
  - softwareProductVulnerabilityNetworkAccessAchieved
  - softwareProductVulnerabilityPhysicalAccessAchieved
  - softwareProductVulnerabilityLowPrivilegesAchieved
  - softwareProductVulnerabilityHighPrivilegesAchieved
  - softwareProductVulnerabilityUserInteractionAchieved
  - attemptSoftwareProductAbuse
  - softwareProductAbuse
  - readFromSoftProdVulnerability
  - modifyFromSoftProdVulnerability
  - denyFromSoftProdVulnerability
  - attemptApplicationRespondConnectThroughData
  - successfulApplicationRespondConnectThroughData
  - applicationRespondConnectThroughData
  - attemptAuthorizedApplicationRespondConnectThroughData
  - successfulAuthorizedApplicationRespondConnectThroughData
  - authorizedApplicationRespondConnectThroughData
  - attemptRead
  - successfulRead
  - read
  - specificAccessRead
  - attemptModify
  - successfulModify
  - modify
  - specificAccessModify
  - attemptDeny
  - successfulDeny
  - deny
  - specificAccessDelete
  - denyFromNetworkingAsset
  - denyFromLockout
  description:
    user: A routing firewall specifies a router with firewall capabilities that connects
      many networks.
  name: RoutingFirewall
  sub_assets: []
  super_assets:
  - Application
- associations:
  - - ApplicationConnection
    - applications
    - appConnections
  - - InApplicationConnection
    - inApplications
    - ingoingAppConnections
  - - OutApplicationConnection
    - outApplications
    - outgoingAppConnections
  - - NetworkConnection
    - networks
    - netConnections
  - - InNetworkConnection
    - inNetworks
    - ingoingNetConnections
  - - OutNetworkConnection
    - outNetworks
    - outgoingNetConnections
  - - DiodeInNetworkConnection
    - diodeInNetworks
    - diodeIngoingNetConnections
  - - FirewallConnectionRule
    - routingFirewalls
    - connectionRules
  attack_steps:
  - restricted
  - bypassRestricted
  - restrictedBypassed
  - payloadInspection
  - bypassPayloadInspection
  - payloadInspectionBypassed
  - attemptReverseReach
  - reverseReach
  - attemptAccessNetworksUninspected
  - attemptAccessNetworksInspected
  - successfulAccessNetworksUninspected
  - successfulAccessNetworksInspected
  - accessNetworksUninspected
  - accessNetworksInspected
  - attemptConnectToApplicationsUninspected
  - attemptConnectToApplicationsInspected
  - connectToApplicationsUninspected
  - connectToApplicationsInspected
  - attemptDeny
  - deny
  description:
    developer: This asset is mainly used to model the functionality of a network connection
      through a firewall. If Data is added, then it also models the data in transit.
    user: This asset is used to model firewall rules between Applications and/or Networks.
      The association selected (bi/uni-directional) only describes the connection
      initiation.
  name: ConnectionRule
  sub_assets: []
  super_assets: []
- associations: []
  attack_steps:
  - notPresent
  - attemptAbuse
  - abuse
  - attemptExploit
  - exploit
  - impact
  description:
    user: Vulnerability refers to the inability (of a system, application, etc.) to
      withstand the effects of a hostile environment.
  name: Vulnerability
  sub_assets:
  - SoftwareVulnerability
  - HardwareVulnerability
  super_assets: []
- associations:
  - - ApplicationVulnerability
    - softProductVulnerabilities
    - softwareProduct
  - - ApplicationVulnerability
    - vulnerabilities
    - application
  attack_steps:
  - notPresent
  - attemptAbuse
  - abuse
  - attemptExploit
  - exploit
  - impact
  - networkAccessRequired
  - localAccessRequired
  - physicalAccessRequired
  - lowPrivilegesRequired
  - highPrivilegesRequired
  - userInteractionRequired
  - confidentialityImpactLimitations
  - availabilityImpactLimitations
  - integrityImpactLimitations
  - highComplexityExploitRequired
  - inherentUserInteraction
  - networkAccessAchieved
  - localAccessAchieved
  - physicalAccessAchieved
  - lowPrivilegesAchieved
  - highPrivilegesAchieved
  - userInteractionAchieved
  - read
  - modify
  - deny
  - exploitTrivially
  - exploitWithEffort
  description:
    developer: Vulnerabilities in coreLang were designed to be in line with the 3.1
      CVSS specification(https://www.first.org/cvss/specification-document#Common-Vulnerability-Scoring-System-version-3-1-Specification-Document).
      The defenses on the SoftwareVulnerability asset represent 7 of the base metrics
      scores, all of them except the scope metric. The temporal and environmental
      metrics are beyond the language's scope.
    user: A vulnerability that affects software (i.e. Applications or SoftwareProducts).
  name: SoftwareVulnerability
  sub_assets: []
  super_assets:
  - Vulnerability
- associations:
  - - hardwareVulnerability
    - vulnerabilities
    - hardware
  attack_steps:
  - notPresent
  - attemptAbuse
  - abuse
  - attemptExploit
  - exploit
  - impact
  - physicalAccessRequired
  - confidentialityImpactLimitations
  - availabilityImpactLimitations
  - integrityImpactLimitations
  - effortRequiredToExploit
  - physicalAccessAchieved
  - read
  - modify
  - deny
  - exploitTrivially
  - exploitWithEffort
  description:
    user: A vulnerability that affects hardware.
  name: HardwareVulnerability
  sub_assets: []
  super_assets:
  - Vulnerability
Associations:
- description:
    user: Hardware on which Applications are running. The host hardware is not mandatory
      to be specified.
  left:
    asset: Hardware
    fieldname: hostHardware
    max: 1
    min: 0
  name: SysExecution
  right:
    asset: Application
    fieldname: sysExecutedApps
    max: null
    min: 0
- description:
    user: Access on PhysicalZone will give physicalAccess on the deployed Hardware,
      but access to the hardware does not provide access to the physical zone (e.g.
      iLOs).
  left:
    asset: PhysicalZone
    fieldname: physicalZones
    max: null
    min: 0
  name: ZoneInclusion
  right:
    asset: Hardware
    fieldname: hardwareSystems
    max: null
    min: 0
- description:
    user: Data can be hosted on hardware.
  left:
    asset: Data
    fieldname: hostedData
    max: null
    min: 0
  name: DataHosting
  right:
    asset: Hardware
    fieldname: hardware
    max: 1
    min: 0
- description:
    user: A user may have access to different hardware systems, rigs, or components.
  left:
    asset: User
    fieldname: users
    max: null
    min: 0
  name: HardwareAccess
  right:
    asset: Hardware
    fieldname: hardwareSystems
    max: null
    min: 0
- description:
    user: A Hardware system/component can have multiple hardware vulnerabilities.
  left:
    asset: HardwareVulnerability
    fieldname: vulnerabilities
    max: null
    min: 0
  name: hardwareVulnerability
  right:
    asset: Hardware
    fieldname: hardware
    max: 1
    min: 0
- description:
    user: Data can contain information, as for example credentials.
  left:
    asset: Data
    fieldname: containerData
    max: null
    min: 0
  name: InfoContainment
  right:
    asset: Information
    fieldname: information
    max: null
    min: 0
- description:
    mitre: 'Used for M1053: Data Backup'
    user: Information can be replicated across multiple data assets that offer redundancy.
  left:
    asset: Data
    fieldname: dataReplicas
    max: null
    min: 0
  name: Replica
  right:
    asset: Information
    fieldname: replicatedInformation
    max: null
    min: 0
- description:
    user: Information can be specified as a dependence for an Application.
  left:
    asset: Information
    fieldname: infoDependedUpon
    max: null
    min: 0
  name: Dependence
  right:
    asset: Application
    fieldname: dependentApps
    max: null
    min: 0
- description:
    user: An application can be associated with a software product that has some specific
      characteristics such as specific Vulnerabilities and deployment repository.
  left:
    asset: SoftwareProduct
    fieldname: appSoftProduct
    max: 1
    min: 0
  name: AppSoftwareProduct
  right:
    asset: Application
    fieldname: softApplications
    max: null
    min: 0
- description:
    user: A SoftwareProduct can have multiple software vulnerabilities.
  left:
    asset: SoftwareVulnerability
    fieldname: softProductVulnerabilities
    max: null
    min: 0
  name: ApplicationVulnerability
  right:
    asset: SoftwareProduct
    fieldname: softwareProduct
    max: 1
    min: 0
- description:
    mitre: 'Used for M1048: Application Isolation and Sandboxing'
    user: Sandboxing and containerization are represented through AppExecution. This
      application hosting can be nested. For example, application 1 runs application
      2 which runs application 3. (Where application 1 is an OS, application 2 is
      a VM, and application 3 is app running in the VM.)
  left:
    asset: Application
    fieldname: hostApp
    max: 1
    min: 0
  name: AppExecution
  right:
    asset: Application
    fieldname: appExecutedApps
    max: null
    min: 0
- description:
    user: IDPSs can provide protection to other applications.
  left:
    asset: IDPS
    fieldname: protectorIDPSs
    max: null
    min: 0
  name: AppProtection
  right:
    asset: Application
    fieldname: protectedApps
    max: null
    min: 0
- description:
    user: An application should be able to contain some data.
  left:
    asset: Data
    fieldname: containedData
    max: null
    min: 0
  name: AppContainment
  right:
    asset: Application
    fieldname: containingApp
    max: null
    min: 0
- description:
    user: An application can also send some data that are supposed to be transferred
      over a network or connection. This expresses an active connection.
  left:
    asset: Data
    fieldname: sentData
    max: null
    min: 0
  name: SendData
  right:
    asset: Application
    fieldname: senderApp
    max: null
    min: 0
- description:
    user: An application can also receive some data that are supposed to be transferred
      over a network or connection. This expresses an active connection.
  left:
    asset: Data
    fieldname: receivedData
    max: null
    min: 0
  name: ReceiveData
  right:
    asset: Application
    fieldname: receiverApp
    max: null
    min: 0
- description:
    user: Data can be specified as a dependence for an Application.
  left:
    asset: Data
    fieldname: dataDependedUpon
    max: null
    min: 0
  name: Dependence
  right:
    asset: Application
    fieldname: dependentApps
    max: null
    min: 0
- description:
    user: Every application executes on a system with privileges of a specified identity
      on the system. If the application is compromised then the privileges should
      be compromised.
  left:
    asset: IAMObject
    fieldname: executionPrivIAMs
    max: null
    min: 0
  name: ExecutionPrivilegeAccess
  right:
    asset: Application
    fieldname: execPrivApps
    max: null
    min: 0
- description:
    user: High privilege application access on an Application results in the (full)
      access/compromise of the application and all the child applications.
  left:
    asset: IAMObject
    fieldname: highPrivAppIAMs
    max: null
    min: 0
  name: HighPrivilegeApplicationAccess
  right:
    asset: Application
    fieldname: highPrivApps
    max: null
    min: 0
- description:
    user: Low privilege application access on an Application allows only the local
      interaction with the application and all the specified privileges.
  left:
    asset: IAMObject
    fieldname: lowPrivAppIAMs
    max: null
    min: 0
  name: LowPrivilegeApplicationAccess
  right:
    asset: Application
    fieldname: lowPrivApps
    max: null
    min: 0
- description:
    user: A routing firewall can have an admin/manager interface (application) that
      is accessible from a network location.
  left:
    asset: RoutingFirewall
    fieldname: managedRoutingFw
    max: null
    min: 0
  name: ManagedBy
  right:
    asset: Application
    fieldname: managerApp
    max: 1
    min: 0
- description:
    developer: "This can equivalently be modeled using a ConnectionRule but this direct\
      \ approach should be prefered in the case where the application is \u201Clocated\u201D\
      \ in the same network as the host on which it is running."
    modeler: This is DEPRECATED and should only be used by fully aware modelers.
    user: An application can communicate / be exposed on a network.
  left:
    asset: Network
    fieldname: networks
    max: null
    min: 0
  name: NetworkExposure
  right:
    asset: Application
    fieldname: applications
    max: null
    min: 0
- description:
    modeler: ConnectionRules associated with Applications are practically expressing
      a traffic flow.
    user: An application can communicate over one or more (mesh type) bidirectional
      connections.
  left:
    asset: Application
    fieldname: applications
    max: null
    min: 0
  name: ApplicationConnection
  right:
    asset: ConnectionRule
    fieldname: appConnections
    max: null
    min: 0
- description:
    user: Two or more applications can also be inter-connected via a uni-directional
      connection. In means that this is the server side application, awaiting incoming
      connections.
  left:
    asset: Application
    fieldname: inApplications
    max: null
    min: 0
  name: InApplicationConnection
  right:
    asset: ConnectionRule
    fieldname: ingoingAppConnections
    max: null
    min: 0
- description:
    user: Two or more applications can also be inter-connected via a uni-directional
      connection. Out means that this is the client side application initiating connections.
  left:
    asset: Application
    fieldname: outApplications
    max: null
    min: 0
  name: OutApplicationConnection
  right:
    asset: ConnectionRule
    fieldname: outgoingAppConnections
    max: null
    min: 0
- description:
    user: An Application can have multiple software vulnerabilities.
  left:
    asset: SoftwareVulnerability
    fieldname: vulnerabilities
    max: null
    min: 0
  name: ApplicationVulnerability
  right:
    asset: Application
    fieldname: application
    max: 1
    min: 0
- description:
    user: Access on PhysicalZone will give physicalAccess on the deployed networks,
      but access to the network does not provide access to the physical zone.
  left:
    asset: PhysicalZone
    fieldname: physicalZones
    max: null
    min: 0
  name: ZoneInclusion
  right:
    asset: Network
    fieldname: networks
    max: null
    min: 0
- description:
    user: A user may have access to different physical zones.
  left:
    asset: User
    fieldname: users
    max: null
    min: 0
  name: ZoneAccess
  right:
    asset: PhysicalZone
    fieldname: physicalZones
    max: null
    min: 0
- description:
    user: Data can be contained inside other data.
  left:
    asset: Data
    fieldname: containingData
    max: null
    min: 0
  name: DataContainment
  right:
    asset: Data
    fieldname: containedData
    max: null
    min: 0
- description:
    user: A network can also contain some data that are supposed to be network-wide
      available.
  left:
    asset: Data
    fieldname: transitData
    max: null
    min: 0
  name: DataInTransit
  right:
    asset: Network
    fieldname: transitNetwork
    max: null
    min: 0
- description:
    mitre: 'Used for M1041: Encrypt Sensitive Information, M1043: Credential Access
      Protection'
    user: Encrypted data can be associated with the relevant encryption credentials.
  left:
    asset: Credentials
    fieldname: encryptCreds
    max: 1
    min: 0
  name: EncryptionCredentials
  right:
    asset: Data
    fieldname: encryptedData
    max: null
    min: 0
- description:
    mitre: 'Used for M1045: Code Signing, M1046: Boot Integrity'
    user: Signed data can be associated with the relevant signing credentials.
  left:
    asset: Credentials
    fieldname: signingCreds
    max: 1
    min: 0
  name: SigningCredentials
  right:
    asset: Data
    fieldname: signedData
    max: null
    min: 0
- description: {}
  left:
    asset: IAMObject
    fieldname: readingIAMs
    max: null
    min: 0
  name: ReadPrivileges
  right:
    asset: Data
    fieldname: readPrivData
    max: null
    min: 0
- description: {}
  left:
    asset: IAMObject
    fieldname: writingIAMs
    max: null
    min: 0
  name: WritePrivileges
  right:
    asset: Data
    fieldname: writePrivData
    max: null
    min: 0
- description:
    mitre: 'Used for M1026: Privileged Account Management, M1025: Privileged Process
      Integrity, M1022: Restrict File and Directory Permissions, M1052: User Account
      Control, M1018: User Account Management, M1024: Restrict Registry Permissions,
      M1043: Credential Access Protection, M1057: Data Loss Prevention, M1039: Environment
      Variable Permissions'
  left:
    asset: IAMObject
    fieldname: deletingIAMs
    max: null
    min: 0
  name: DeletePrivileges
  right:
    asset: Data
    fieldname: deletePrivData
    max: null
    min: 0
- description:
    user: Identities, Groups, and Privileges may have a subset of Privileges that
      we logically separate to model specific scenarios, such as partial lockouts
      or speculating about possible privileges.
  left:
    asset: IAMObject
    fieldname: IAMOwners
    max: null
    min: 0
  name: HasPrivileges
  right:
    asset: Privileges
    fieldname: subprivileges
    max: null
    min: 0
- description:
    user: Identities, Groups, and Privileges may have account management roles for
      other Identities, Groups, and Privileges.
  left:
    asset: IAMObject
    fieldname: managers
    max: null
    min: 0
  name: AccountManagement
  right:
    asset: IAMObject
    fieldname: managedIAMs
    max: null
    min: 0
- description: {}
  left:
    asset: Identity
    fieldname: identities
    max: null
    min: 0
  name: IdentityCredentials
  right:
    asset: Credentials
    fieldname: credentials
    max: null
    min: 0
- description:
    user: Starting from a parent Identity, the child Identities can be assumed due
      to inheritance.
  left:
    asset: Identity
    fieldname: parentId
    max: null
    min: 0
  name: CanAssume
  right:
    asset: Identity
    fieldname: childId
    max: null
    min: 0
- description: {}
  left:
    asset: Group
    fieldname: memberOf
    max: null
    min: 0
  name: MemberOf
  right:
    asset: Identity
    fieldname: groupIds
    max: null
    min: 0
- description:
    user: A user may have different identities associated with it.
  left:
    asset: User
    fieldname: users
    max: null
    min: 0
  name: UserAssignedIdentities
  right:
    asset: Identity
    fieldname: userIds
    max: null
    min: 0
- description: {}
  left:
    asset: Group
    fieldname: parentGroup
    max: null
    min: 0
  name: MemberOf
  right:
    asset: Group
    fieldname: childGroups
    max: null
    min: 0
- description:
    user: Credentials can be associated with their hashed counterparts. Multiple hashes
      can be generated for the same Credentials, but a hash is unique to one set of
      Credentials.
  left:
    asset: Credentials
    fieldname: hashes
    max: null
    min: 0
  name: HashedCredentials
  right:
    asset: Credentials
    fieldname: origCreds
    max: 1
    min: 0
- description:
    user: Credentials can be associated with other Credentials to depict conditional
      authentication procedures, such as multi-factor authentication.
  left:
    asset: Credentials
    fieldname: credentials
    max: null
    min: 0
  name: ConditionalAuthentication
  right:
    asset: Credentials
    fieldname: requiredFactors
    max: null
    min: 0
- description:
    user: Two or more networks can also be inter-connected via a bidirectional connection.
  left:
    asset: Network
    fieldname: networks
    max: null
    min: 0
  name: NetworkConnection
  right:
    asset: ConnectionRule
    fieldname: netConnections
    max: null
    min: 0
- description:
    user: Two or more networks can also be inter-connected via a uni-directional connection.
      In means that ingoing traffic to the network is allowed.
  left:
    asset: Network
    fieldname: inNetworks
    max: null
    min: 0
  name: InNetworkConnection
  right:
    asset: ConnectionRule
    fieldname: ingoingNetConnections
    max: null
    min: 0
- description:
    user: Two or more networks can also be inter-connected via a uni-directional connection.
      Out means that outgoing traffic from the network is allowed.
  left:
    asset: Network
    fieldname: outNetworks
    max: null
    min: 0
  name: OutNetworkConnection
  right:
    asset: ConnectionRule
    fieldname: outgoingNetConnections
    max: null
    min: 0
- description:
    user: Two or more networks can also be inter-connected via a uni-directional connection
      that acts like a diode. That means that no responses can come back after connection
      initiation.
  left:
    asset: Network
    fieldname: diodeInNetworks
    max: null
    min: 0
  name: DiodeInNetworkConnection
  right:
    asset: ConnectionRule
    fieldname: diodeIngoingNetConnections
    max: null
    min: 0
- description:
    user: A routing firewall has routing or firewall rules specified by connections
      between networks or applications respectively.
  left:
    asset: RoutingFirewall
    fieldname: routingFirewalls
    max: 1
    min: 0
  name: FirewallConnectionRule
  right:
    asset: ConnectionRule
    fieldname: connectionRules
    max: null
    min: 0
Attack Steps:
- asset: Hardware
  children:
    bypassHardwareModificationsProtection:
    - null
    successfulUseVulnerabilityFromPhysicalAccess:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUseVulnerabilityFromPhysicalAccess
  parents:
    hardwareModifications:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    useVulnerability:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUseVulnerabilityFromPhysicalAccess
  parents:
    attemptUseVulnerabilityFromPhysicalAccess:
    - null
    hardwareModificationsProtectionBypassed:
    - null
  ttc: null
  type: and
- asset: Hardware
  children:
    useVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUseVulnerabilityFromSoftwareFullAccess
  parents:
    fullAccess:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
  ttc: null
  type: or
- asset: Hardware
  children:
    attemptAbuse:
    - hardwareVulnerability:
        fieldname: vulnerabilities
        next_association: {}
  description:
    user: The attacker is able to use the associated vulnerabilities, usually as a
      result of obtaining physical access.
  name: useVulnerability
  parents:
    attemptUseVulnerabilityFromSoftwareFullAccess:
    - null
    successfulUseVulnerabilityFromPhysicalAccess:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    bypassHardwareModificationsProtection:
    - null
    successfulSpreadWormThroughRemovableMedia:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptSpreadWormThroughRemovableMedia
  parents:
    fullAccess:
    - null
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
  ttc: null
  type: or
- asset: Hardware
  children:
    spreadWormThroughRemovableMedia:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulSpreadWormThroughRemovableMedia
  parents:
    attemptSpreadWormThroughRemovableMedia:
    - null
    hardwareModificationsProtectionBypassed:
    - null
  ttc: null
  type: and
- asset: Hardware
  children:
    attemptDeliverMaliciousRemovableMedia:
    - union:
        left:
          HardwareAccess:
            fieldname: users
            next_association: {}
        right:
          ZoneInclusion:
            fieldname: physicalZones
            next_association:
              ZoneAccess:
                fieldname: users
                next_association: {}
  description:
    developer: Try to spread malware through removable media that the users connect
      to the hardware system.
  name: spreadWormThroughRemovableMedia
  parents:
    successfulSpreadWormThroughRemovableMedia:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    attemptRead:
    - DataHosting:
        fieldname: hostedData
        next_association: {}
    attemptSpreadWormThroughRemovableMedia:
    - null
    attemptWrite:
    - DataHosting:
        fieldname: hostedData
        next_association: {}
    deny:
    - null
    fullAccess:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
  description:
    user: Full access on a piece of hardware grants full access on the applications
      running on it and access to the hosted data.
  name: fullAccess
  parents:
    modify:
    - null
    supplyChainAttack:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    bypassSupplyChainAuditing:
    - null
    successfulSupplyChainAttack:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
    modeler: Triggering this attack step is the only way to model hardware supply
      chain attacks in the language, therefore scenarios interested in those aspects
      need to employ it as an entry point.
    user: Adversaries may perform supply chain compromise attacks to gain control
      of hardware before it is put into use.
  name: attemptSupplyChainAttack
  parents: {}
  ttc: null
  type: or
- asset: Hardware
  children:
    supplyChainAttack:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulSupplyChainAttack
  parents:
    attemptSupplyChainAttack:
    - null
    supplyChainAuditingBypassed:
    - null
  ttc: null
  type: and
- asset: Hardware
  children:
    fullAccess:
    - null
  description:
    modeler: The Hardware supply chain attack represents an attacker being able to
      tamper with the hardware/firmware before the deployment of the product and not
      alterations made to the hardware/firmware once it is operating.
    user: A supply chain compromise means that the attacker has gained full access
      of the hardware.
  name: supplyChainAttack
  parents:
    successfulSupplyChainAttack:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Hardware
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Auditing inside the hardware supply chain can detect possible supply chain
      attacks.
  name: supplyChainAuditing
  parents: {}
  ttc: null
  type: defense
- asset: Hardware
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Supply chain auditing can be bypassed.
  name: bypassSupplyChainAuditing
  parents:
    attemptSupplyChainAttack:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Hardware
  children:
    successfulSupplyChainAttack:
    - null
  description:
    developer: Supply chain auditing is bypassed either because it was not set or
      the attacker was able to circumvent it through additional effort.
  name: supplyChainAuditingBypassed
  parents:
    bypassSupplyChainAuditing:
    - null
    supplyChainAuditing:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    attemptHardwareModifications:
    - null
    deny:
    - null
    localConnect:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
  description:
    modeler: This attack step can be used as an entry point when analyzing scenarios
      that involve gaining physical access to assets.
    user: Attacker has physical access to the location where the hardware is physically
      deployed. They could then deny the hardware, locally connect to the hosted applications,
      and exploit potential physical vulnerabilities.
  name: physicalAccess
  parents:
    gainPhysicalAccess:
    - ZoneInclusion:
        fieldname: physicalZones
        next_association: {}
  ttc: null
  type: or
- asset: Hardware
  children:
    bypassHardwareModificationsProtection:
    - null
    successfulHardwareModifications:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptHardwareModifications
  parents:
    physicalAccess:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    hardwareModifications:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulHardwareModifications
  parents:
    attemptHardwareModifications:
    - null
    hardwareModificationsProtectionBypassed:
    - null
  ttc: null
  type: and
- asset: Hardware
  children:
    attemptUseVulnerabilityFromPhysicalAccess:
    - null
    physicalAccessAchieved:
    - hardwareVulnerability:
        fieldname: vulnerabilities
        next_association: {}
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
  description:
    developer: Attacker is able to modify the hardware setup. They could then exploit
      physical vulnerabilities or software vulnerabilities that require physical access.
  name: hardwareModifications
  parents:
    successfulHardwareModifications:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    hardwareModificationsProtectionBypassed:
    - null
  description:
    developer: But it does not protect against denial of service attacks or local
      connect on hosted applications.
    user: This defense protects against unauthorized modifications to the hardware
      that would allow an attacker to exploit a hardware vulnerability or a user to
      connect malicious devices to it.
  name: hardwareModificationsProtection
  parents: {}
  ttc: null
  type: defense
- asset: Hardware
  children:
    hardwareModificationsProtectionBypassed:
    - null
  description:
    user: Hardware modifications protection can be bypassed.
  name: bypassHardwareModificationsProtection
  parents:
    attemptHardwareModifications:
    - null
    attemptSpreadWormThroughRemovableMedia:
    - null
    attemptUnsafeUserActivity:
    - null
    attemptUseVulnerabilityFromPhysicalAccess:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Hardware
  children:
    successfulHardwareModifications:
    - null
    successfulSpreadWormThroughRemovableMedia:
    - null
    successfulUnsafeUserActivity:
    - null
    successfulUseVulnerabilityFromPhysicalAccess:
    - null
  description:
    developer: Hardware modifications protection is bypassed either because it was
      not set or the attacker was able to circumvent it through additional effort.
  name: hardwareModificationsProtectionBypassed
  parents:
    bypassHardwareModificationsProtection:
    - null
    hardwareModificationsProtection:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    bypassHardwareModificationsProtection:
    - null
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUnsafeUserActivity
  parents:
    deliverMaliciousRemovableMedia:
    - ZoneInclusion:
        fieldname: physicalZones
        next_association:
          ZoneAccess:
            fieldname: users
            next_association: {}
    - HardwareAccess:
        fieldname: users
        next_association: {}
  ttc: null
  type: or
- asset: Hardware
  children:
    unsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUnsafeUserActivity
  parents:
    attemptUnsafeUserActivity:
    - null
    hardwareModificationsProtectionBypassed:
    - null
  ttc: null
  type: and
- asset: Hardware
  children:
    attemptUnsafeUserActivity:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    physicalAccessAchieved:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
  description:
    developer: Currently only represents connecting a malicious removable media drive.
    user: A user is performing unsafe actions on the hardware. This exposes the Applications
      running on top of the hardware and fulfils the physical access requirement of
      SoftwareVulnerabilities associated with them.
  name: unsafeUserActivity
  parents:
    successfulUnsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    attemptDeny:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    - DataHosting:
        fieldname: hostedData
        next_association: {}
  description:
    user: Denial of service (DoS) attack on hardware leads to DoS on all the applications
      running on it and hosted data.
  name: deny
  parents:
    deny:
    - hardwareVulnerability:
        fieldname: vulnerabilities
        next_association: {}
    fullAccess:
    - null
    physicalAccess:
    - null
  ttc: null
  type: or
- asset: Hardware
  children:
    attemptRead:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    - DataHosting:
        fieldname: hostedData
        next_association: {}
  description:
    user: Read on hardware leads to a read on all the applications running on it and
      hosted data.
  name: read
  parents:
    read:
    - hardwareVulnerability:
        fieldname: vulnerabilities
        next_association: {}
  ttc: null
  type: or
- asset: Hardware
  children:
    attemptModify:
    - SysExecution:
        fieldname: sysExecutedApps
        next_association: {}
    attemptWrite:
    - DataHosting:
        fieldname: hostedData
        next_association: {}
    fullAccess:
    - null
  description:
    user: Modify on hardware gives the attacker full access to the hardware and leads
      to a modify/write on all the applications running on it and hosted data.
  name: modify
  parents:
    modify:
    - hardwareVulnerability:
        fieldname: vulnerabilities
        next_association: {}
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to read the information. They may still be unable to
      extract it, which represents the adversary being able to read it themselves.
      This is the case if autonomous code is able to read it, but lack the required
      networking connections to transmit it back to the adversary.
  name: read
  parents:
    attemptReadFromReplica:
    - null
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    compromiseApplications:
    - null
    delete:
    - null
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to write the information.
  name: write
  parents:
    attemptWriteFromReplica:
    - null
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    deny:
    - null
  description:
    user: The attacker is able to delete the information.
  name: delete
  parents:
    attemptDeleteFromReplica:
    - null
    write:
    - null
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
  description:
    user: The attacker is able to deny the information.
  name: deny
  parents:
    attemptDenyFromReplica:
    - null
    delete:
    - null
  ttc: null
  type: or
- asset: SoftwareProduct
  children: {}
  description:
    user: The attacker is able to extract the information. This means that they have
      a path available through which they can transfer the information back to a system
      that they control.
  name: extract
  parents:
    attemptExtractFromReplica:
    - null
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    read:
    - null
  description:
    developer: Reading one replica allows the attacker to read all other replicas
      as well since the information contained in them is the same.
  name: attemptReadFromReplica
  parents: {}
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    write:
    - null
  description:
    developer: Information can be overwritten only if all replicas have been overwritten.
  name: attemptWriteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: SoftwareProduct
  children:
    delete:
    - null
  description:
    developer: Information can be deleted only if all replicas have been deleted.
  name: attemptDeleteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: SoftwareProduct
  children:
    deny:
    - null
  description:
    developer: Information can be denied only if all replicas have been denied.
  name: attemptDenyFromReplica
  parents: {}
  ttc: null
  type: and
- asset: SoftwareProduct
  children:
    extract:
    - null
  description:
    developer: The attacker attempts to extract the information.
  name: attemptExtractFromReplica
  parents: {}
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    attemptFullAccessFromSupplyChainCompromise:
    - AppSoftwareProduct:
        fieldname: softApplications
        next_association: {}
  description:
    user: If the origin of a software product is compromised (modified maliciously)
      this is interpreted as a software supply chain attack and therefore the associated
      applications should also be fully compromised.
  name: compromiseApplications
  parents:
    write:
    - null
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    attemptReadFromSoftProdVulnerability:
    - AppSoftwareProduct:
        fieldname: softApplications
        next_association: {}
  description:
    developer: This is an intermediary attack step to propagate read on all of the
      associated applications if the vulnerability has a confidentiality impact.
  name: readApplications
  parents:
    read:
    - ApplicationVulnerability:
        fieldname: softProductVulnerabilities
        next_association: {}
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    attemptModifyFromSoftProdVulnerability:
    - AppSoftwareProduct:
        fieldname: softApplications
        next_association: {}
  description:
    developer: This is an intermediary attack step to propagate modify on all of the
      associated applications if the vulnerability has an integrity impact.
  name: modifyApplications
  parents:
    modify:
    - ApplicationVulnerability:
        fieldname: softProductVulnerabilities
        next_association: {}
  ttc: null
  type: or
- asset: SoftwareProduct
  children:
    attemptDenyFromSoftProdVulnerability:
    - AppSoftwareProduct:
        fieldname: softApplications
        next_association: {}
  description:
    developer: This is an intermediary attack step to propagate deny on all of the
      associated applications if the vulnerability has an availability impact.
  name: denyApplications
  parents:
    deny:
    - ApplicationVulnerability:
        fieldname: softProductVulnerabilities
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    denyFromSoftProdVulnerability:
    - null
    fullAccessFromSupplyChainCompromise:
    - null
    localAccess:
    - null
    modifyFromSoftProdVulnerability:
    - null
    networkAccess:
    - null
    networkConnectFromResponse:
    - null
    readFromSoftProdVulnerability:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
    successfulApplicationRespondConnectThroughData:
    - null
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
    successfulDeny:
    - null
    successfulModify:
    - null
    successfulRead:
    - null
    successfulReverseReach:
    - null
    successfulUnsafeUserActivity:
    - null
    successfulUseVulnerability:
    - null
  description:
    developer: This defense allows for both speculation about the presence of a particular
      application and to suggest that if it is possible removing it may restrict the
      attacker's actions.
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility that the Application does
      not actually exist. Typically this is useful to see what attack steps are removed
      if a particular non-essential component(e.g. a plugin, library, feature, or
      service).
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: Application
  children:
    bypassEffectiveness:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    successfulUseVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUseVulnerability
  parents:
    bypassContainerization:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    localConnect:
    - null
    networkConnectUninspected:
    - null
    specificAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    useVulnerability:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUseVulnerability
  parents:
    attemptUseVulnerability:
    - null
    effectivenessBypassed:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptAbuse:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    attemptSoftwareProductAbuse:
    - null
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: This includes vulnerabilities associated with the SoftwareProduct that
      this Application is running as well.
    user: Try to exploit the associated vulnerabilities.
  name: useVulnerability
  parents:
    successfulUseVulnerability:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    successfulReverseReach:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
    modeler: If the entry point of the attacker is an Application this attack step
      needs to be explicitly called on it by the modeler in order to have reverse
      reach start propagating from the Application to the rest of the assets in the
      model. This is the case because no other attack step on the Application asset
      triggers this attack step.
    user: The attacker is reachable from this Application therefore start propagating
      reverse reach from it. Reverse reach is used to determine whether or not the
      attacker can be reached by the user.
  name: attemptReverseReach
  parents:
    reverseReach:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    reverseReach:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulReverseReach
  parents:
    attemptReverseReach:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attemptReverseReach:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: ingoingAppConnections
            next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
    networkConnectFromResponse:
    - null
  description:
    developer: Reverse reach is used to determine whether or not the attacker can
      be reached by the user. Reverse reach propagates toward outgoing or bidirectional
      communications.
  name: reverseReach
  parents:
    successfulReverseReach:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    attemptUseVulnerability:
    - null
    localAccess:
    - null
    localAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    softwareProductVulnerabilityLocalAccessAchieved:
    - null
    specificAccessFromLocalConnection:
    - null
  description:
    user: The attacker can interface with the Application without going through networking
      communications. This is achieved by gaining full access on a hosted Application,
      specific access on the hosting Application, physical access on the hardware
      on which the Application is running, or via unsafe user activity.
  name: localConnect
  parents:
    fullAccess:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    physicalAccess:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    specificAccess:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    unsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    attemptUseVulnerability:
    - null
    networkAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    networkConnect:
    - null
    softwareProductVulnerabilityNetworkAccessAchieved:
    - null
    specificAccessNetworkConnect:
    - null
  description:
    user: An attacker can connect to any network exposed application and try to authenticate
      or trigger vulnerabilities.
  name: networkConnectUninspected
  parents:
    accessUninspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    connectToApplicationsUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: ingoingAppConnections
            next_association: {}
    fullAccess:
    - ApplicationConnection:
        fieldname: appConnections
        next_association:
          FirewallConnectionRule:
            fieldname: routingFirewalls
            next_association: {}
    networkConnectFromResponse:
    - null
    unsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    networkConnect:
    - null
    specificAccessNetworkConnect:
    - null
  description:
    user: If the network communications occur via any ConnectionRules that have their
      payload inspected the attacker can still authenticate, but they cannot trigger
      vulnerabilities.
  name: networkConnectInspected
  parents:
    accessInspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    connectToApplicationsInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: ingoingAppConnections
            next_association: {}
    connectToApplicationsUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: ingoingAppConnections
            next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    networkAccess:
    - null
  description:
    developer: Intermediate attack step.
  name: networkConnect
  parents:
    networkConnectInspected:
    - null
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    specificAccessFromNetworkConnection:
    - null
  description:
    developer: Intermediate attack step.
  name: specificAccessNetworkConnect
  parents:
    networkConnectInspected:
    - null
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    accessInspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    accessUninspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    attemptAccessNetworksInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptAccessNetworksUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptConnectToApplicationsInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptConnectToApplicationsUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
  description:
    developer: The attacker can access outgoing and bidirectional networks and connections
      associated with the application.
  name: accessNetworkAndConnections
  parents:
    fullAccess:
    - null
    specificAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    networkConnectFromResponse:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptNetworkConnectFromResponse
  parents:
    applicationRespondConnect:
    - SendData:
        fieldname: sentData
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    networkConnectUninspected:
    - null
  description:
    developer: An attacker may be able to respond to requests submitted by a client
      application.
  name: networkConnectFromResponse
  parents:
    attemptNetworkConnectFromResponse:
    - null
    notPresent:
    - null
    reverseReach:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: and
- asset: Application
  children:
    specificAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for specific access.
  name: specificAccessFromLocalConnection
  parents:
    localConnect:
    - null
    notPresent:
    - null
    specificAccessAuthenticate:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    specificAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for specific access.
  name: specificAccessFromNetworkConnection
  parents:
    notPresent:
    - null
    specificAccessAuthenticate:
    - null
    specificAccessNetworkConnect:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    accessNetworkAndConnections:
    - null
    attemptAuthorizedApplicationRespondConnectThroughData:
    - null
    attemptUseVulnerability:
    - null
    bypassContainerization:
    - null
    localConnect:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    specificAccessDelete:
    - null
    specificAccessModify:
    - null
    specificAccessRead:
    - null
  description:
    user: The adversary is able to gain low-privilege access on the Application which
      allows them to access the networks and connections associated with it and locally
      connect to hosted Applications. Additionally, if they have the required privileges
      the attacker may also access data hosted, sent, or received by the Application.
  name: specificAccess
  parents:
    fullAccess:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    attemptUseVulnerability:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
  description:
    user: The attacker is able to break out of an application container/sandbox and
      try to exploit any vulnerability of the host application.
  name: bypassContainerization
  parents:
    specificAccess:
    - null
  ttc:
    arguments: []
    name: HardAndUncertain
    type: function
  type: or
- asset: Application
  children:
    highPrivilegesAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    localAccess:
    - null
    networkAccess:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - null
  description:
    user: The attacker is able to authenticate with the appropriate high-level privileges.
  name: authenticate
  parents:
    assume:
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivAppIAMs
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivAppIAMs
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivAppIAMs
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivAppIAMs
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    lowPrivilegesAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
  description:
    user: The attacker is able to authenticate with the appropriate low-level privileges.
  name: specificAccessAuthenticate
  parents:
    assume:
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivAppIAMs
        next_association: {}
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivAppIAMs
        next_association: {}
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivAppIAMs
        next_association: {}
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivAppIAMs
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for full access.
  name: localAccess
  parents:
    authenticate:
    - null
    localConnect:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for full access.
  name: networkAccess
  parents:
    authenticate:
    - null
    networkConnect:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    accessNetworkAndConnections:
    - null
    attemptApplicationRespondConnectThroughData:
    - null
    attemptAssume:
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    attemptDeny:
    - null
    attemptModify:
    - null
    - ManagedBy:
        fieldname: managedRoutingFw
        next_association: {}
    attemptRead:
    - null
    attemptSpreadWormThroughRemovableMedia:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    attemptUseVulnerabilityFromSoftwareFullAccess:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    localConnect:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    specificAccess:
    - null
  description:
    modeler: It is common in models for the attacker to be granted full access on
      an Application, representing their own tools, that is connected to the Internet
      to explore possible attack vectors.
    user: Full access on the Application means the attacker has complete control of
      the application and can perform any actions within its execution context.
  name: fullAccess
  parents:
    fullAccess:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    fullAccessFromSupplyChainCompromise:
    - null
    localAccess:
    - null
    modify:
    - null
    networkAccess:
    - null
    write:
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: dataDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    physicalAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - null
  description:
    developer: Intermediate attack step used to propagate physical access throughout
      application nesting.
  name: physicalAccessAchieved
  parents:
    hardwareModifications:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    physicalAccessAchieved:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    unsafeUserActivity:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attackerUnsafeUserActivityCapabilityWithoutReverseReach:
    - null
    bypassEffectiveness:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUnsafeUserActivity
  parents:
    unsafeUserActivity:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivAppIAMs
        next_association: {}
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivAppIAMs
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivAppIAMs
        next_association: {}
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivAppIAMs
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    unsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUnsafeUserActivity
  parents:
    attackerUnsafeUserActivityCapability:
    - null
    attemptUnsafeUserActivity:
    - null
    effectivenessBypassed:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    localConnect:
    - null
    networkConnectUninspected:
    - null
    userInteractionAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
  description:
    user: The unsafe actions of users on this application open it up to attacks and
      enable vulnerabilities that require user interaction.
  name: unsafeUserActivity
  parents:
    successfulUnsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    successfulUnsafeUserActivity:
    - null
  description:
    developer: The impacts of the user's unsafe actions are greatly limited if there
      are no channels through which the attacker can be reached by the unwitting user.
  name: attackerUnsafeUserActivityCapability
  parents:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attackerUnsafeUserActivityCapabilityWithoutReverseReach:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    attackerUnsafeUserActivityCapability:
    - null
  description:
    developer: The attacker can be reached from this application and can therefore
      more easily exploit the unsafe user actions.
  name: attackerUnsafeUserActivityCapabilityWithReverseReach
  parents:
    attemptUnsafeUserActivity:
    - null
    reverseReach:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attackerUnsafeUserActivityCapability:
    - null
  description:
    developer: 'The attacker cannot be reached from this application. This means that
      the autonomous malicious code must either be able to do reconnaissance on the
      fly or the reconnaissance was done beforehand and coded into it. This is much
      more complex and difficult than the situation where the attacker is reachable
      from the application which restricts the capabilities of being successful. Important
      Note: This step should never directly or indirectly lead to reverse reach as
      it would fulfil the attacker interactivity requirements it is missing.'
  name: attackerUnsafeUserActivityCapabilityWithoutReverseReach
  parents:
    attemptUnsafeUserActivity:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Application
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Auditing inside the supply chain can detect possible supply chain attacks.
  name: supplyChainAuditing
  parents: {}
  ttc: null
  type: defense
- asset: Application
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Supply chain auditing can be bypassed.
  name: bypassSupplyChainAuditing
  parents:
    attemptFullAccessFromSupplyChainCompromise:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Application
  children:
    fullAccessFromSupplyChainCompromise:
    - null
  description:
    developer: The supply chain audit is bypassed either because it was not set or
      the attacker was able to circumvent it through additional effort.
  name: supplyChainAuditingBypassed
  parents:
    bypassSupplyChainAuditing:
    - null
    supplyChainAuditing:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    bypassSupplyChainAuditing:
    - null
    fullAccessFromSupplyChainCompromise:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptFullAccessFromSupplyChainCompromise
  parents:
    compromiseApplications:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack step.
  name: fullAccessFromSupplyChainCompromise
  parents:
    attemptFullAccessFromSupplyChainCompromise:
    - null
    notPresent:
    - null
    supplyChainAuditingBypassed:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptReadFromSoftProdVulnerability
  parents:
    readApplications:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    modifyFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptModifyFromSoftProdVulnerability
  parents:
    modifyApplications:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    denyFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDenyFromSoftProdVulnerability
  parents:
    denyApplications:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Only enable the following attacks steps if a SoftwareProduct is associated
      with this Application.
  name: softwareCheck
  parents: {}
  ttc: null
  type: exist
- asset: Application
  children:
    localAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityLocalAccessAchieved
  parents:
    localAccessRequired:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    localConnect:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    networkAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityNetworkAccessAchieved
  parents:
    networkAccessRequired:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    physicalAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityPhysicalAccessAchieved
  parents:
    physicalAccessAchieved:
    - null
    physicalAccessRequired:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    lowPrivilegesAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityLowPrivilegesAchieved
  parents:
    lowPrivilegesRequired:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    specificAccessAuthenticate:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    highPrivilegesAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityHighPrivilegesAchieved
  parents:
    authenticate:
    - null
    highPrivilegesRequired:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    softwareProductAbuse:
    - null
    userInteractionAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityUserInteractionAchieved
  parents:
    inherentUserInteraction:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    userInteractionRequired:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
  ttc: null
  type: or
- asset: Application
  children:
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: attemptSoftwareProductAbuse
  parents:
    useVulnerability:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductAbuse
  parents:
    attemptSoftwareProductAbuse:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - null
    softwareProductVulnerabilityLocalAccessAchieved:
    - null
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - null
    softwareProductVulnerabilityNetworkAccessAchieved:
    - null
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - null
    softwareProductVulnerabilityUserInteractionAchieved:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptRead:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: readFromSoftProdVulnerability
  parents:
    attemptReadFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptModify:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: modifyFromSoftProdVulnerability
  parents:
    attemptModifyFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptDeny:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: denyFromSoftProdVulnerability
  parents:
    attemptDenyFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    successfulApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptApplicationRespondConnectThroughData
  parents:
    fullAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    applicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulApplicationRespondConnectThroughData
  parents:
    attemptApplicationRespondConnectThroughData:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptApplicationRespondConnect:
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    developer: After full access on the application received data can be used to try
      a connect through respond to the client side application.
  name: applicationRespondConnectThroughData
  parents:
    successfulApplicationRespondConnectThroughData:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAuthorizedApplicationRespondConnectThroughData
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    authorizedApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAuthorizedApplicationRespondConnectThroughData
  parents:
    attemptAuthorizedApplicationRespondConnectThroughData:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    authorizedApplicationRespondConnectFromApplication:
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    developer: After specific access on the application received data can be used
      to try a connect through respond to the client side application. To succeed
      the attacker must also attain write privileges on the received data.
  name: authorizedApplicationRespondConnectThroughData
  parents:
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    successfulRead:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptRead
  parents:
    fullAccess:
    - null
    read:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    readFromSoftProdVulnerability:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    read:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulRead
  parents:
    attemptRead:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptRead:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    user: The attacker can read some or all of this service's (and executed by this)
      source code and/or data (both local and sent/received).
  name: read
  parents:
    read:
    - ApplicationVulnerability:
        fieldname: vulnerabilities
        next_association: {}
    successfulRead:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    authorizedReadFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    user: The attacker can read the service's source code and/or sent and received
      Data, given the necessary permissions
  name: specificAccessRead
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    successfulModify:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptModify
  parents:
    fullAccess:
    - null
    modify:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    modifyFromSoftProdVulnerability:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    modify:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulModify
  parents:
    attemptModify:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptModify:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    attemptWrite:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    fullAccess:
    - null
  description:
    user: The attacker can modify some or all of this service's (and executed by this)
      source code and/or data.
  name: modify
  parents:
    modify:
    - ApplicationVulnerability:
        fieldname: vulnerabilities
        next_association: {}
    successfulModify:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    authorizedWriteFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
  description:
    user: The attacker can modify the service's source code and/or sent  Data, given
      the necessary permissions
  name: specificAccessModify
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    successfulDeny:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDeny
  parents:
    deny:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    denyFromLockout:
    - null
    denyFromNetworkingAsset:
    - null
    denyFromSoftProdVulnerability:
    - null
    fullAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    deny:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulDeny
  parents:
    attemptDeny:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Application
  children:
    attemptDeny:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
  description:
    user: The attacker can deny some or all functionality and data pertaining to this
      application/service as well as executed applications.
  name: deny
  parents:
    deny:
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: dataDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - Dependence:
        fieldname: infoDependedUpon
        next_association: {}
    - ApplicationVulnerability:
        fieldname: vulnerabilities
        next_association: {}
    successfulDeny:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    authorizedDeleteFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
  description:
    user: The attacker can delete some or all functionality and data pertaining to
      this application/service as well as executed applications, given the necessary
      permissions
  name: specificAccessDelete
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: Application
  children:
    attemptDeny:
    - null
  description:
    developer: This is an intermediate attack step to only allow deny on an application
      when all the connection rules and networks associated with it are denied, because
      an app can be serving on many different ports.
  name: denyFromNetworkingAsset
  parents:
    deny:
    - union:
        left:
          NetworkExposure:
            fieldname: networks
            next_association: {}
        right:
          ApplicationConnection:
            fieldname: appConnections
            next_association:
              union:
                left:
                  union:
                    left:
                      union:
                        left:
                          NetworkConnection:
                            fieldname: networks
                            next_association: {}
                        right:
                          InNetworkConnection:
                            fieldname: inNetworks
                            next_association: {}
                    right:
                      OutNetworkConnection:
                        fieldname: outNetworks
                        next_association: {}
                right:
                  DiodeInNetworkConnection:
                    fieldname: diodeInNetworks
                    next_association: {}
    - union:
        left:
          union:
            left:
              ApplicationConnection:
                fieldname: appConnections
                next_association: {}
            right:
              InApplicationConnection:
                fieldname: ingoingAppConnections
                next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
  ttc: null
  type: and
- asset: Application
  children:
    attemptDeny:
    - null
  description:
    developer: This is an intermediate attack step to only trigger deny on an application
      when all the executing access control roles are locked out.
  name: denyFromLockout
  parents:
    lockout:
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
  ttc: null
  type: and
- asset: IDPS
  children:
    denyFromSoftProdVulnerability:
    - null
    fullAccessFromSupplyChainCompromise:
    - null
    localAccess:
    - null
    modifyFromSoftProdVulnerability:
    - null
    networkAccess:
    - null
    networkConnectFromResponse:
    - null
    readFromSoftProdVulnerability:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
    successfulApplicationRespondConnectThroughData:
    - null
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
    successfulDeny:
    - null
    successfulModify:
    - null
    successfulRead:
    - null
    successfulReverseReach:
    - null
    successfulUnsafeUserActivity:
    - null
    successfulUseVulnerability:
    - null
  description:
    developer: This defense allows for both speculation about the presence of a particular
      application and to suggest that if it is possible removing it may restrict the
      attacker's actions.
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility that the Application does
      not actually exist. Typically this is useful to see what attack steps are removed
      if a particular non-essential component(e.g. a plugin, library, feature, or
      service).
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: IDPS
  children:
    bypassEffectiveness:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    successfulUseVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUseVulnerability
  parents:
    localConnect:
    - null
    networkConnectUninspected:
    - null
    specificAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    useVulnerability:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUseVulnerability
  parents:
    attemptUseVulnerability:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptAbuse:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    attemptSoftwareProductAbuse:
    - null
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: This includes vulnerabilities associated with the SoftwareProduct that
      this Application is running as well.
    user: Try to exploit the associated vulnerabilities.
  name: useVulnerability
  parents:
    successfulUseVulnerability:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    successfulReverseReach:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
    modeler: If the entry point of the attacker is an Application this attack step
      needs to be explicitly called on it by the modeler in order to have reverse
      reach start propagating from the Application to the rest of the assets in the
      model. This is the case because no other attack step on the Application asset
      triggers this attack step.
    user: The attacker is reachable from this Application therefore start propagating
      reverse reach from it. Reverse reach is used to determine whether or not the
      attacker can be reached by the user.
  name: attemptReverseReach
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    reverseReach:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulReverseReach
  parents:
    attemptReverseReach:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attemptReverseReach:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: ingoingAppConnections
            next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
    networkConnectFromResponse:
    - null
  description:
    developer: Reverse reach is used to determine whether or not the attacker can
      be reached by the user. Reverse reach propagates toward outgoing or bidirectional
      communications.
  name: reverseReach
  parents:
    successfulReverseReach:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    attemptUseVulnerability:
    - null
    localAccess:
    - null
    localAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    softwareProductVulnerabilityLocalAccessAchieved:
    - null
    specificAccessFromLocalConnection:
    - null
  description:
    user: The attacker can interface with the Application without going through networking
      communications. This is achieved by gaining full access on a hosted Application,
      specific access on the hosting Application, physical access on the hardware
      on which the Application is running, or via unsafe user activity.
  name: localConnect
  parents:
    unsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    attemptUseVulnerability:
    - null
    networkAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    networkConnect:
    - null
    softwareProductVulnerabilityNetworkAccessAchieved:
    - null
    specificAccessNetworkConnect:
    - null
  description:
    user: An attacker can connect to any network exposed application and try to authenticate
      or trigger vulnerabilities.
  name: networkConnectUninspected
  parents:
    networkConnectFromResponse:
    - null
    unsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    networkConnect:
    - null
    specificAccessNetworkConnect:
    - null
  description:
    user: If the network communications occur via any ConnectionRules that have their
      payload inspected the attacker can still authenticate, but they cannot trigger
      vulnerabilities.
  name: networkConnectInspected
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    networkAccess:
    - null
  description:
    developer: Intermediate attack step.
  name: networkConnect
  parents:
    networkConnectInspected:
    - null
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    specificAccessFromNetworkConnection:
    - null
  description:
    developer: Intermediate attack step.
  name: specificAccessNetworkConnect
  parents:
    networkConnectInspected:
    - null
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    accessInspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    accessUninspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    attemptAccessNetworksInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptAccessNetworksUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptConnectToApplicationsInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptConnectToApplicationsUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
  description:
    developer: The attacker can access outgoing and bidirectional networks and connections
      associated with the application.
  name: accessNetworkAndConnections
  parents:
    fullAccess:
    - null
    specificAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    networkConnectFromResponse:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptNetworkConnectFromResponse
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    networkConnectUninspected:
    - null
  description:
    developer: An attacker may be able to respond to requests submitted by a client
      application.
  name: networkConnectFromResponse
  parents:
    attemptNetworkConnectFromResponse:
    - null
    notPresent:
    - null
    reverseReach:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: and
- asset: IDPS
  children:
    specificAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for specific access.
  name: specificAccessFromLocalConnection
  parents:
    localConnect:
    - null
    notPresent:
    - null
    specificAccessAuthenticate:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    specificAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for specific access.
  name: specificAccessFromNetworkConnection
  parents:
    notPresent:
    - null
    specificAccessAuthenticate:
    - null
    specificAccessNetworkConnect:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    accessNetworkAndConnections:
    - null
    attemptAuthorizedApplicationRespondConnectThroughData:
    - null
    attemptUseVulnerability:
    - null
    bypassContainerization:
    - null
    localConnect:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    specificAccessDelete:
    - null
    specificAccessModify:
    - null
    specificAccessRead:
    - null
  description:
    user: The adversary is able to gain low-privilege access on the Application which
      allows them to access the networks and connections associated with it and locally
      connect to hosted Applications. Additionally, if they have the required privileges
      the attacker may also access data hosted, sent, or received by the Application.
  name: specificAccess
  parents:
    fullAccess:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    attemptUseVulnerability:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
  description:
    user: The attacker is able to break out of an application container/sandbox and
      try to exploit any vulnerability of the host application.
  name: bypassContainerization
  parents:
    specificAccess:
    - null
  ttc:
    arguments: []
    name: HardAndUncertain
    type: function
  type: or
- asset: IDPS
  children:
    highPrivilegesAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    localAccess:
    - null
    networkAccess:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - null
  description:
    user: The attacker is able to authenticate with the appropriate high-level privileges.
  name: authenticate
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    lowPrivilegesAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
  description:
    user: The attacker is able to authenticate with the appropriate low-level privileges.
  name: specificAccessAuthenticate
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for full access.
  name: localAccess
  parents:
    authenticate:
    - null
    localConnect:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for full access.
  name: networkAccess
  parents:
    authenticate:
    - null
    networkConnect:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    accessNetworkAndConnections:
    - null
    attemptApplicationRespondConnectThroughData:
    - null
    attemptAssume:
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    attemptDeny:
    - null
    attemptModify:
    - null
    - ManagedBy:
        fieldname: managedRoutingFw
        next_association: {}
    attemptRead:
    - null
    attemptSpreadWormThroughRemovableMedia:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    attemptUseVulnerabilityFromSoftwareFullAccess:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    effectivenessBypassed:
    - null
    localConnect:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    specificAccess:
    - null
  description:
    modeler: It is common in models for the attacker to be granted full access on
      an Application, representing their own tools, that is connected to the Internet
      to explore possible attack vectors.
    user: Full access on the Application means the attacker has complete control of
      the application and can perform any actions within its execution context.
  name: fullAccess
  parents:
    fullAccessFromSupplyChainCompromise:
    - null
    localAccess:
    - null
    modify:
    - null
    networkAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    physicalAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - null
  description:
    developer: Intermediate attack step used to propagate physical access throughout
      application nesting.
  name: physicalAccessAchieved
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attackerUnsafeUserActivityCapabilityWithoutReverseReach:
    - null
    bypassEffectiveness:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUnsafeUserActivity
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    unsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUnsafeUserActivity
  parents:
    attackerUnsafeUserActivityCapability:
    - null
    attemptUnsafeUserActivity:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    localConnect:
    - null
    networkConnectUninspected:
    - null
    userInteractionAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
  description:
    user: The unsafe actions of users on this application open it up to attacks and
      enable vulnerabilities that require user interaction.
  name: unsafeUserActivity
  parents:
    successfulUnsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    successfulUnsafeUserActivity:
    - null
  description:
    developer: The impacts of the user's unsafe actions are greatly limited if there
      are no channels through which the attacker can be reached by the unwitting user.
  name: attackerUnsafeUserActivityCapability
  parents:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attackerUnsafeUserActivityCapabilityWithoutReverseReach:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    attackerUnsafeUserActivityCapability:
    - null
  description:
    developer: The attacker can be reached from this application and can therefore
      more easily exploit the unsafe user actions.
  name: attackerUnsafeUserActivityCapabilityWithReverseReach
  parents:
    attemptUnsafeUserActivity:
    - null
    reverseReach:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attackerUnsafeUserActivityCapability:
    - null
  description:
    developer: 'The attacker cannot be reached from this application. This means that
      the autonomous malicious code must either be able to do reconnaissance on the
      fly or the reconnaissance was done beforehand and coded into it. This is much
      more complex and difficult than the situation where the attacker is reachable
      from the application which restricts the capabilities of being successful. Important
      Note: This step should never directly or indirectly lead to reverse reach as
      it would fulfil the attacker interactivity requirements it is missing.'
  name: attackerUnsafeUserActivityCapabilityWithoutReverseReach
  parents:
    attemptUnsafeUserActivity:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: IDPS
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Auditing inside the supply chain can detect possible supply chain attacks.
  name: supplyChainAuditing
  parents: {}
  ttc: null
  type: defense
- asset: IDPS
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Supply chain auditing can be bypassed.
  name: bypassSupplyChainAuditing
  parents:
    attemptFullAccessFromSupplyChainCompromise:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: IDPS
  children:
    fullAccessFromSupplyChainCompromise:
    - null
  description:
    developer: The supply chain audit is bypassed either because it was not set or
      the attacker was able to circumvent it through additional effort.
  name: supplyChainAuditingBypassed
  parents:
    bypassSupplyChainAuditing:
    - null
    supplyChainAuditing:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    bypassSupplyChainAuditing:
    - null
    fullAccessFromSupplyChainCompromise:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptFullAccessFromSupplyChainCompromise
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack step.
  name: fullAccessFromSupplyChainCompromise
  parents:
    attemptFullAccessFromSupplyChainCompromise:
    - null
    notPresent:
    - null
    supplyChainAuditingBypassed:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptReadFromSoftProdVulnerability
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    modifyFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptModifyFromSoftProdVulnerability
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    denyFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDenyFromSoftProdVulnerability
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Only enable the following attacks steps if a SoftwareProduct is associated
      with this Application.
  name: softwareCheck
  parents: {}
  ttc: null
  type: exist
- asset: IDPS
  children:
    localAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityLocalAccessAchieved
  parents:
    localConnect:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    networkAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityNetworkAccessAchieved
  parents:
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    physicalAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityPhysicalAccessAchieved
  parents:
    physicalAccessAchieved:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    lowPrivilegesAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityLowPrivilegesAchieved
  parents:
    specificAccessAuthenticate:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    highPrivilegesAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityHighPrivilegesAchieved
  parents:
    authenticate:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    softwareProductAbuse:
    - null
    userInteractionAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityUserInteractionAchieved
  parents: {}
  ttc: null
  type: or
- asset: IDPS
  children:
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: attemptSoftwareProductAbuse
  parents:
    useVulnerability:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductAbuse
  parents:
    attemptSoftwareProductAbuse:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - null
    softwareProductVulnerabilityLocalAccessAchieved:
    - null
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - null
    softwareProductVulnerabilityNetworkAccessAchieved:
    - null
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - null
    softwareProductVulnerabilityUserInteractionAchieved:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptRead:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: readFromSoftProdVulnerability
  parents:
    attemptReadFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptModify:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: modifyFromSoftProdVulnerability
  parents:
    attemptModifyFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptDeny:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: denyFromSoftProdVulnerability
  parents:
    attemptDenyFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    successfulApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptApplicationRespondConnectThroughData
  parents:
    fullAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    applicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulApplicationRespondConnectThroughData
  parents:
    attemptApplicationRespondConnectThroughData:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptApplicationRespondConnect:
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    developer: After full access on the application received data can be used to try
      a connect through respond to the client side application.
  name: applicationRespondConnectThroughData
  parents:
    successfulApplicationRespondConnectThroughData:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAuthorizedApplicationRespondConnectThroughData
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    authorizedApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAuthorizedApplicationRespondConnectThroughData
  parents:
    attemptAuthorizedApplicationRespondConnectThroughData:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    authorizedApplicationRespondConnectFromApplication:
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    developer: After specific access on the application received data can be used
      to try a connect through respond to the client side application. To succeed
      the attacker must also attain write privileges on the received data.
  name: authorizedApplicationRespondConnectThroughData
  parents:
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    successfulRead:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptRead
  parents:
    fullAccess:
    - null
    readFromSoftProdVulnerability:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    read:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulRead
  parents:
    attemptRead:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptRead:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    user: The attacker can read some or all of this service's (and executed by this)
      source code and/or data (both local and sent/received).
  name: read
  parents:
    successfulRead:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    authorizedReadFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    user: The attacker can read the service's source code and/or sent and received
      Data, given the necessary permissions
  name: specificAccessRead
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    successfulModify:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptModify
  parents:
    fullAccess:
    - null
    modifyFromSoftProdVulnerability:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    modify:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulModify
  parents:
    attemptModify:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptModify:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    attemptWrite:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    fullAccess:
    - null
  description:
    user: The attacker can modify some or all of this service's (and executed by this)
      source code and/or data.
  name: modify
  parents:
    successfulModify:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    authorizedWriteFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
  description:
    user: The attacker can modify the service's source code and/or sent  Data, given
      the necessary permissions
  name: specificAccessModify
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    successfulDeny:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDeny
  parents:
    denyFromLockout:
    - null
    denyFromNetworkingAsset:
    - null
    denyFromSoftProdVulnerability:
    - null
    fullAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    deny:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulDeny
  parents:
    attemptDeny:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptDeny:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    effectivenessBypassed:
    - null
  description:
    user: The attacker can deny some or all functionality and data pertaining to this
      application/service as well as executed applications.
  name: deny
  parents:
    successfulDeny:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    authorizedDeleteFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
  description:
    user: The attacker can delete some or all functionality and data pertaining to
      this application/service as well as executed applications, given the necessary
      permissions
  name: specificAccessDelete
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: IDPS
  children:
    attemptDeny:
    - null
  description:
    developer: This is an intermediate attack step to only allow deny on an application
      when all the connection rules and networks associated with it are denied, because
      an app can be serving on many different ports.
  name: denyFromNetworkingAsset
  parents: {}
  ttc: null
  type: and
- asset: IDPS
  children:
    attemptDeny:
    - null
  description:
    developer: This is an intermediate attack step to only trigger deny on an application
      when all the executing access control roles are locked out.
  name: denyFromLockout
  parents: {}
  ttc: null
  type: and
- asset: IDPS
  children:
    effectivenessBypassed:
    - null
  description:
    mitre: 'Used for M1049: Antivirus/Antimalware, M1050: Exploit Protection, M1040:
      Behavior Prevention on Endpoint, M1038: Execution Prevention, M1051: Update
      Software, M1016: Vulnerability Scanning, M1021: Restrict Web-Based Content'
    modeler: The notPresent defense should inversely impact the effectiveness defense.
      However, because this is not currently implemented in coreLang it is up to the
      modeler to properly take this into account when setting the values of these
      defenses.
    user: The effectiveness defense represents how capable the IDPS is to prevent
      disruptions from occurring on the associated applications.
  name: effectiveness
  parents: {}
  ttc:
    arguments: []
    name: Enabled
    type: function
  type: defense
- asset: IDPS
  children:
    effectivenessBypassed:
    - null
  description:
    user: The effectiveness of an IDPS can be bypassed.
  name: bypassEffectiveness
  parents:
    attemptUnsafeUserActivity:
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
    attemptUseVulnerability:
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: IDPS
  children:
    successfulUnsafeUserActivity:
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
    successfulUseVulnerability:
    - AppProtection:
        fieldname: protectedApps
        next_association: {}
  description:
    developer: The protection of the IDPS has been bypassed either as a result of
      attacker activity or due to some internal property of the IDPS.
  name: effectivenessBypassed
  parents:
    bypassEffectiveness:
    - null
    deny:
    - null
    effectiveness:
    - null
    fullAccess:
    - null
  ttc: null
  type: or
- asset: PhysicalZone
  children:
    physicalAccess:
    - ZoneInclusion:
        fieldname: hardwareSystems
        next_association: {}
    - ZoneInclusion:
        fieldname: networks
        next_association: {}
  description:
    modeler: This attack step can be used as an entry point when analyzing scenarios
      that involve gaining physical access to assets.
    user: By gaining access on a physical zone, physical access on the housed hardware
      and networks is also attained.
  name: gainPhysicalAccess
  parents: {}
  ttc: null
  type: or
- asset: Information
  children:
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to read the information. They may still be unable to
      extract it, which represents the adversary being able to read it themselves.
      This is the case if autonomous code is able to read it, but lack the required
      networking connections to transmit it back to the adversary.
  name: read
  parents:
    attemptReadFromReplica:
    - null
    read:
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  ttc: null
  type: or
- asset: Information
  children:
    delete:
    - null
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to write the information.
  name: write
  parents:
    attemptWriteFromReplica:
    - null
    write:
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  ttc: null
  type: or
- asset: Information
  children:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    deny:
    - null
  description:
    user: The attacker is able to delete the information.
  name: delete
  parents:
    attemptDeleteFromReplica:
    - null
    delete:
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    write:
    - null
  ttc: null
  type: or
- asset: Information
  children:
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
  description:
    user: The attacker is able to deny the information.
  name: deny
  parents:
    attemptDenyFromReplica:
    - null
    delete:
    - null
    deny:
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  ttc: null
  type: or
- asset: Information
  children: {}
  description:
    user: The attacker is able to extract the information. This means that they have
      a path available through which they can transfer the information back to a system
      that they control.
  name: extract
  parents:
    attemptExtractFromReplica:
    - null
    extract:
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  ttc: null
  type: or
- asset: Information
  children:
    read:
    - null
  description:
    developer: Reading one replica allows the attacker to read all other replicas
      as well since the information contained in them is the same.
  name: attemptReadFromReplica
  parents:
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
  ttc: null
  type: or
- asset: Information
  children:
    write:
    - null
  description:
    developer: Information can be overwritten only if all replicas have been overwritten.
  name: attemptWriteFromReplica
  parents:
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
  ttc: null
  type: and
- asset: Information
  children:
    delete:
    - null
  description:
    developer: Information can be deleted only if all replicas have been deleted.
  name: attemptDeleteFromReplica
  parents:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
  ttc: null
  type: and
- asset: Information
  children:
    deny:
    - null
  description:
    developer: Information can be denied only if all replicas have been denied.
  name: attemptDenyFromReplica
  parents:
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
  ttc: null
  type: and
- asset: Information
  children:
    extract:
    - null
  description:
    developer: The attacker attempts to extract the information.
  name: attemptExtractFromReplica
  parents:
    extract:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    applicationRespondConnect:
    - null
    extract:
    - null
    reverseReach:
    - null
    successfulDelete:
    - null
    successfulDeny:
    - null
    successfulRead:
    - null
    successfulWrite:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility of data not existing on the
      associated container (i.e. Hardware, Application, Network, etc.).
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: Data
  children:
    authorizedDeleteFromApplication:
    - null
    authorizedReadFromApplication:
    - null
    authorizedWriteFromApplication:
    - null
  description:
    developer: Try to gain access to the data through permissions.
  name: authorizedAccessFromApplication
  parents: {}
  ttc: null
  type: or
- asset: Data
  children:
    accessUnencryptedData:
    - null
  description:
    developer: If the data are encrypted then accessing them requires the associated
      encryption credentials/key. Data will be considered encrypted if there is at
      least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData'
      is triggered.
  name: dataEncrypted
  parents: {}
  ttc: null
  type: notExist
- asset: Data
  children:
    accessUnsignedData:
    - null
  description:
    developer: If the data are signed then writing them requires the associated signing
      credentials/key. Data will be considered signed if there is at least one Credentials
      asset associated with it. Otherwise, 'accessUnsignedData' is triggered.
  name: dataSigned
  parents: {}
  ttc: null
  type: notExist
- asset: Data
  children:
    bypassPayloadInspectionFromEncryptedData:
    - null
  description:
    developer: If the data are encrypted then payload inspection cannot be performed
      on the connection rules they are transmitted over.
  name: payloadInspectionBypassFromEncryptedData
  parents: {}
  ttc: null
  type: exist
- asset: Data
  children:
    payloadInspectionBypassed:
    - intersection:
        left:
          union:
            left:
              SendData:
                fieldname: senderApp
                next_association:
                  ApplicationConnection:
                    fieldname: appConnections
                    next_association: {}
            right:
              SendData:
                fieldname: senderApp
                next_association:
                  OutApplicationConnection:
                    fieldname: outgoingAppConnections
                    next_association: {}
        right:
          union:
            left:
              union:
                left:
                  DataInTransit:
                    fieldname: transitNetwork
                    next_association:
                      NetworkConnection:
                        fieldname: netConnections
                        next_association: {}
                right:
                  DataInTransit:
                    fieldname: transitNetwork
                    next_association:
                      InNetworkConnection:
                        fieldname: ingoingNetConnections
                        next_association: {}
            right:
              DataInTransit:
                fieldname: transitNetwork
                next_association:
                  DiodeInNetworkConnection:
                    fieldname: diodeIngoingNetConnections
                    next_association: {}
    - intersection:
        left:
          union:
            left:
              ReceiveData:
                fieldname: receiverApp
                next_association:
                  ApplicationConnection:
                    fieldname: appConnections
                    next_association: {}
            right:
              ReceiveData:
                fieldname: receiverApp
                next_association:
                  InApplicationConnection:
                    fieldname: ingoingAppConnections
                    next_association: {}
        right:
          union:
            left:
              DataInTransit:
                fieldname: transitNetwork
                next_association:
                  NetworkConnection:
                    fieldname: netConnections
                    next_association: {}
            right:
              DataInTransit:
                fieldname: transitNetwork
                next_association:
                  OutNetworkConnection:
                    fieldname: outgoingNetConnections
                    next_association: {}
  description:
    developer: The connection rules that the encrypted data traverse over cannot provide
      payload inspection since they are assumed to permit encrypted traffic. This
      implies that the attacker could simply encrypt their own communications to evade
      inspection.
  name: bypassPayloadInspectionFromEncryptedData
  parents:
    payloadInspectionBypassFromEncryptedData:
    - null
  ttc: null
  type: or
- asset: Data
  children:
    accessDecryptedData:
    - null
  description:
    developer: If data are unencrypted then access them.
  name: accessUnencryptedData
  parents:
    dataEncrypted:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    accessSpoofedData:
    - null
  description:
    developer: If data are unsigned then alter them.
  name: accessUnsignedData
  parents:
    dataSigned:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    applicationRespondConnect:
    - null
    successfulWrite:
    - null
  description:
    developer: Intermediate attack step to only allow effects of 'accessUnsignedData'
      on data after compromising the signing credentials or signing is disabled.
  name: accessSpoofedData
  parents:
    accessUnsignedData:
    - null
    use:
    - SigningCredentials:
        fieldname: signingCreds
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    applicationRespondConnect:
    - null
    successfulDelete:
    - null
    successfulRead:
    - null
    successfulWrite:
    - null
  description:
    developer: Intermediate attack step to only allow effects of 'accessUnencryptedData'
      on data after compromising the encryption credentials or encryption is disabled.
  name: accessDecryptedData
  parents:
    accessUnencryptedData:
    - null
    use:
    - EncryptionCredentials:
        fieldname: encryptCreds
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    applicationRespondConnect:
    - null
  description:
    developer: Intermediate attack step to handle defenses.
  name: attemptApplicationRespondConnect
  parents:
    adversaryInTheMiddle:
    - DataInTransit:
        fieldname: transitNetwork
        next_association: {}
    applicationRespondConnectThroughData:
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    authorizedApplicationRespondConnect:
    - null
  ttc: null
  type: or
- asset: Data
  children:
    applicationRespondConnect:
    - DataContainment:
        fieldname: containedData
        next_association: {}
    attemptNetworkConnectFromResponse:
    - SendData:
        fieldname: senderApp
        next_association: {}
  description:
    developer: In order to perform a respond connect attack the adversary must be
      able to write the received data.
  name: applicationRespondConnect
  parents:
    accessDecryptedData:
    - null
    accessSpoofedData:
    - null
    applicationRespondConnect:
    - DataContainment:
        fieldname: containingData
        next_association: {}
    attemptApplicationRespondConnect:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    authorizedApplicationRespondConnect:
    - null
  description:
    developer: The adversary can attempt a respond connect attack from an Application,
      but they still require write permissions in order to perform it.
  name: authorizedApplicationRespondConnectFromApplication
  parents:
    authorizedApplicationRespondConnectThroughData:
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    authorizedApplicationRespondConnect:
    - null
  description:
    developer: The attacker has obtained the access control permissions required to
      modify the incoming requests.
  name: authorizedApplicationRespondConnectFromIAM
  parents:
    assume:
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    attemptApplicationRespondConnect:
    - null
  description:
    developer: In order to perform a respond connect attack the adversary must be
      able to write the received data. If they only have specific access on the Application
      we need to see if they also have the required permissions.
  name: authorizedApplicationRespondConnect
  parents:
    authorizedApplicationRespondConnectFromApplication:
    - null
    authorizedApplicationRespondConnectFromIAM:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    successfulRead:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptRead
  parents:
    authorizedRead:
    - null
    eavesdrop:
    - DataInTransit:
        fieldname: transitNetwork
        next_association: {}
    fullAccess:
    - DataHosting:
        fieldname: hardware
        next_association: {}
    read:
    - DataHosting:
        fieldname: hardware
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - DataContainment:
        fieldname: containingData
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    read:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulRead
  parents:
    accessDecryptedData:
    - null
    attemptRead:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    attemptRead:
    - DataContainment:
        fieldname: containedData
        next_association: {}
    attemptReadFromReplica:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    extract:
    - null
    read:
    - InfoContainment:
        fieldname: information
        next_association: {}
  description:
    user: The attacker can read the data. This means that the data can be used for
      further attack steps, but they are not necessarily obtained by the attacker.
      The extract attack step covers the scenario where the attacker actually collects
      the data.
  name: read
  parents:
    read:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    successfulRead:
    - null
  ttc: null
  type: or
- asset: Data
  children:
    authorizedRead:
    - null
  description:
    developer: The attacker has obtained the access control permissions required to
      read the data.
  name: authorizedReadFromIAM
  parents:
    assume:
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    authorizedRead:
    - null
  description:
    developer: The attacker can reach the data via an Application, but they still
      require the adequate permissions to read it.
  name: authorizedReadFromApplication
  parents:
    authorizedAccessFromApplication:
    - null
    specificAccessRead:
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    attemptRead:
    - null
  description:
    developer: An attacker is able to read the Data through authorized permissions,
      this requires both access to the Data and the adequate permissions.
  name: authorizedRead
  parents:
    authorizedReadFromApplication:
    - null
    authorizedReadFromIAM:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    successfulWrite:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptWrite
  parents:
    adversaryInTheMiddle:
    - DataInTransit:
        fieldname: transitNetwork
        next_association: {}
    authorizedWrite:
    - null
    fullAccess:
    - DataHosting:
        fieldname: hardware
        next_association: {}
    modify:
    - DataHosting:
        fieldname: hardware
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    write:
    - DataContainment:
        fieldname: containingData
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    write:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulWrite
  parents:
    accessDecryptedData:
    - null
    accessSpoofedData:
    - null
    attemptWrite:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    attemptDelete:
    - null
    attemptWrite:
    - DataContainment:
        fieldname: containedData
        next_association: {}
    attemptWriteFromReplica:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - InfoContainment:
        fieldname: information
        next_association: {}
  description:
    user: The attacker can write to the location of the data, effectively modifying
      or deleting it.
  name: write
  parents:
    successfulWrite:
    - null
    write:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    authorizedWrite:
    - null
  description:
    developer: The attacker has obtained the access control permissions required to
      write the data.
  name: authorizedWriteFromIAM
  parents:
    assume:
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
    - WritePrivileges:
        fieldname: writingIAMs
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    authorizedWrite:
    - null
  description:
    developer: The attacker can reach the data via an Application, but they still
      require the adequate permissions to write it.
  name: authorizedWriteFromApplication
  parents:
    authorizedAccessFromApplication:
    - null
    specificAccessModify:
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    attemptWrite:
    - null
  description:
    developer: An attacker is able to write the Data through authorized permissions,
      this requires both access to the Data and the adequate permissions.
  name: authorizedWrite
  parents:
    authorizedWriteFromApplication:
    - null
    authorizedWriteFromIAM:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    successfulDelete:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDelete
  parents:
    authorizedDelete:
    - null
    delete:
    - DataContainment:
        fieldname: containingData
        next_association: {}
    write:
    - null
  ttc: null
  type: or
- asset: Data
  children:
    delete:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulDelete
  parents:
    accessDecryptedData:
    - null
    attemptDelete:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    attemptDelete:
    - DataContainment:
        fieldname: containedData
        next_association: {}
    attemptDeleteFromReplica:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    attemptDeny:
    - null
    delete:
    - InfoContainment:
        fieldname: information
        next_association: {}
  description:
    user: The attacker can delete the data.
  name: delete
  parents:
    delete:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    successfulDelete:
    - null
  ttc: null
  type: or
- asset: Data
  children:
    authorizedDelete:
    - null
  description:
    developer: The attacker has obtained the access control permissions required to
      delete the data.
  name: authorizedDeleteFromIAM
  parents:
    assume:
    - DeletePrivileges:
        fieldname: deletingIAMs
        next_association: {}
    - DeletePrivileges:
        fieldname: deletingIAMs
        next_association: {}
    - DeletePrivileges:
        fieldname: deletingIAMs
        next_association: {}
    - DeletePrivileges:
        fieldname: deletingIAMs
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    authorizedDelete:
    - null
  description:
    developer: The attacker can reach the data via an Application, but they still
      require the adequate permissions to delete it.
  name: authorizedDeleteFromApplication
  parents:
    authorizedAccessFromApplication:
    - null
    specificAccessDelete:
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    attemptDelete:
    - null
  description:
    developer: An attacker is able to delete the Data through authorized permissions,
      this requires both access to the Data and the adequate permissions.
  name: authorizedDelete
  parents:
    authorizedDeleteFromApplication:
    - null
    authorizedDeleteFromIAM:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    successfulDeny:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDeny
  parents:
    delete:
    - null
    deny:
    - DataHosting:
        fieldname: hardware
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - DataContainment:
        fieldname: containingData
        next_association: {}
    denyFromLockout:
    - null
  ttc: null
  type: or
- asset: Data
  children:
    deny:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulDeny
  parents:
    attemptDeny:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    attemptDeny:
    - DataContainment:
        fieldname: containedData
        next_association: {}
    attemptDenyFromReplica:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    deny:
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
  description:
    user: If a DoS is performed data are denied, it has the same effects as deleting
      the data.
  name: deny
  parents:
    deny:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    - InfoContainment:
        fieldname: information
        next_association: {}
    successfulDeny:
    - null
  ttc: null
  type: or
- asset: Data
  children:
    attemptDeny:
    - null
  description:
    developer: This is an intermediate attack step to only trigger deny on data when
      all the access control roles that can read them are locked out.
  name: denyFromLockout
  parents:
    lockout:
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
    - ReadPrivileges:
        fieldname: readingIAMs
        next_association: {}
  ttc: null
  type: and
- asset: Data
  children:
    reverseReach:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptReverseReach
  parents:
    reverseReach:
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
    - DataContainment:
        fieldname: containingData
        next_association: {}
    - AppContainment:
        fieldname: containingApp
        next_association: {}
    - SendData:
        fieldname: senderApp
        next_association: {}
    - ReceiveData:
        fieldname: receiverApp
        next_association: {}
  ttc: null
  type: or
- asset: Data
  children:
    attemptReverseReach:
    - DataContainment:
        fieldname: containedData
        next_association: {}
    extract:
    - null
  description:
    developer: Reverse reach for Data is used to determine whether or not the data
      can be transferred to attacker.
  name: reverseReach
  parents:
    attemptReverseReach:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Data
  children:
    attemptExtractFromReplica:
    - Replica:
        fieldname: replicatedInformation
        next_association: {}
    extract:
    - InfoContainment:
        fieldname: information
        next_association: {}
  description:
    user: The attacker can extract the data. The read attack step represents just
      being able to make use of the data for further attack steps without the attacker
      obtaining it.
  name: extract
  parents:
    notPresent:
    - null
    read:
    - null
    reverseReach:
    - null
  ttc: null
  type: and
- asset: IAMObject
  children:
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to read the information. They may still be unable to
      extract it, which represents the adversary being able to read it themselves.
      This is the case if autonomous code is able to read it, but lack the required
      networking connections to transmit it back to the adversary.
  name: read
  parents:
    attemptReadFromReplica:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children:
    attemptAssume:
    - null
    delete:
    - null
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to write the information.
  name: write
  parents:
    attemptWriteFromReplica:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    deny:
    - null
  description:
    user: The attacker is able to delete the information.
  name: delete
  parents:
    attemptDeleteFromReplica:
    - null
    write:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children:
    attemptLockout:
    - null
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
  description:
    user: The attacker is able to deny the information.
  name: deny
  parents:
    attemptDenyFromReplica:
    - null
    delete:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children: {}
  description:
    user: The attacker is able to extract the information. This means that they have
      a path available through which they can transfer the information back to a system
      that they control.
  name: extract
  parents:
    attemptExtractFromReplica:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children:
    read:
    - null
  description:
    developer: Reading one replica allows the attacker to read all other replicas
      as well since the information contained in them is the same.
  name: attemptReadFromReplica
  parents: {}
  ttc: null
  type: or
- asset: IAMObject
  children:
    write:
    - null
  description:
    developer: Information can be overwritten only if all replicas have been overwritten.
  name: attemptWriteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: IAMObject
  children:
    delete:
    - null
  description:
    developer: Information can be deleted only if all replicas have been deleted.
  name: attemptDeleteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: IAMObject
  children:
    deny:
    - null
  description:
    developer: Information can be denied only if all replicas have been denied.
  name: attemptDenyFromReplica
  parents: {}
  ttc: null
  type: and
- asset: IAMObject
  children:
    extract:
    - null
  description:
    developer: The attacker attempts to extract the information.
  name: attemptExtractFromReplica
  parents: {}
  ttc: null
  type: or
- asset: IAMObject
  children:
    successfulAssume:
    - null
    successfulLockout:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    mitre: 'Used for M1026: Privileged Account Management, M1025: Privileged Process
      Integrity, M1022: Restrict File and Directory Permissions, M1052: User Account
      Control, M1018: User Account Management, M1024: Restrict Registry Permissions,
      M1043: Credential Access Protection, M1057: Data Loss Prevention'
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility that the IAM object does not
      actually exist.
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: IAMObject
  children:
    successfulAssume:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAssume
  parents:
    assume:
    - AccountManagement:
        fieldname: managers
        next_association: {}
    - AccountManagement:
        fieldname: managers
        next_association: {}
    - AccountManagement:
        fieldname: managers
        next_association: {}
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
    - AccountManagement:
        fieldname: managers
        next_association: {}
    fullAccess:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    write:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children:
    assume:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAssume
  parents:
    attemptAssume:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IAMObject
  children:
    attemptAssume:
    - AccountManagement:
        fieldname: managedIAMs
        next_association: {}
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
    authenticate:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivApps
        next_association: {}
    authorizedApplicationRespondConnectFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    authorizedDeleteFromIAM:
    - DeletePrivileges:
        fieldname: deletePrivData
        next_association: {}
    authorizedReadFromIAM:
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    authorizedWriteFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    specificAccessAuthenticate:
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivApps
        next_association: {}
  description:
    user: When an attacker is able to assume an IAM asset the privileges associated
      with it can always be exploited, other behaviour is asset specific.
  name: assume
  parents:
    successfulAssume:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children:
    successfulLockout:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptLockout
  parents:
    deny:
    - null
  ttc: null
  type: or
- asset: IAMObject
  children:
    lockout:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulLockout
  parents:
    attemptLockout:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: IAMObject
  children:
    denyFromLockout:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    lockout:
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
  description:
    user: The Identity, Group, or Privileges has been locked out and cannot be used
      by legitimate users. This means that the applications that they can execute
      and data they can read might also be denied if all of the access roles that
      could execute or read them, respectively, have been locked out.
  name: lockout
  parents:
    successfulLockout:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to read the information. They may still be unable to
      extract it, which represents the adversary being able to read it themselves.
      This is the case if autonomous code is able to read it, but lack the required
      networking connections to transmit it back to the adversary.
  name: read
  parents:
    attemptReadFromReplica:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    attemptAssume:
    - null
    delete:
    - null
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to write the information.
  name: write
  parents:
    attemptWriteFromReplica:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    deny:
    - null
  description:
    user: The attacker is able to delete the information.
  name: delete
  parents:
    attemptDeleteFromReplica:
    - null
    write:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    attemptLockout:
    - null
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
  description:
    user: The attacker is able to deny the information.
  name: deny
  parents:
    attemptDenyFromReplica:
    - null
    delete:
    - null
  ttc: null
  type: or
- asset: Identity
  children: {}
  description:
    user: The attacker is able to extract the information. This means that they have
      a path available through which they can transfer the information back to a system
      that they control.
  name: extract
  parents:
    attemptExtractFromReplica:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    read:
    - null
  description:
    developer: Reading one replica allows the attacker to read all other replicas
      as well since the information contained in them is the same.
  name: attemptReadFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Identity
  children:
    write:
    - null
  description:
    developer: Information can be overwritten only if all replicas have been overwritten.
  name: attemptWriteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Identity
  children:
    delete:
    - null
  description:
    developer: Information can be deleted only if all replicas have been deleted.
  name: attemptDeleteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Identity
  children:
    deny:
    - null
  description:
    developer: Information can be denied only if all replicas have been denied.
  name: attemptDenyFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Identity
  children:
    extract:
    - null
  description:
    developer: The attacker attempts to extract the information.
  name: attemptExtractFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Identity
  children:
    successfulAssume:
    - null
    successfulLockout:
    - null
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    mitre: 'Used for M1026: Privileged Account Management, M1025: Privileged Process
      Integrity, M1022: Restrict File and Directory Permissions, M1052: User Account
      Control, M1018: User Account Management, M1024: Restrict Registry Permissions,
      M1043: Credential Access Protection, M1057: Data Loss Prevention'
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility that the IAM object does not
      actually exist.
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: Identity
  children:
    successfulAssume:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAssume
  parents:
    assume:
    - CanAssume:
        fieldname: childId
        next_association: {}
    deliverMaliciousRemovableMedia:
    - UserAssignedIdentities:
        fieldname: users
        next_association: {}
    unsafeUserActivity:
    - UserAssignedIdentities:
        fieldname: users
        next_association: {}
    use:
    - IdentityCredentials:
        fieldname: credentials
        next_association: {}
    write:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    assume:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAssume
  parents:
    attemptAssume:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Identity
  children:
    attemptAssume:
    - AccountManagement:
        fieldname: managedIAMs
        next_association: {}
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
    - CanAssume:
        fieldname: parentId
        next_association: {}
    - MemberOf:
        fieldname: memberOf
        next_association: {}
    authenticate:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivApps
        next_association: {}
    authorizedApplicationRespondConnectFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    authorizedDeleteFromIAM:
    - DeletePrivileges:
        fieldname: deletePrivData
        next_association: {}
    authorizedReadFromIAM:
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    authorizedWriteFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    specificAccessAuthenticate:
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivApps
        next_association: {}
  description:
    user: When an attacker is able to assume an IAM asset the privileges associated
      with it can always be exploited, other behaviour is asset specific.
  name: assume
  parents:
    successfulAssume:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    successfulLockout:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptLockout
  parents:
    deny:
    - null
    lockoutFromCredentials:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    lockout:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulLockout
  parents:
    attemptLockout:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Identity
  children:
    denyFromLockout:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    lockout:
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
    lockoutFromMembers:
    - MemberOf:
        fieldname: memberOf
        next_association: {}
  description:
    user: The Identity, Group, or Privileges has been locked out and cannot be used
      by legitimate users. This means that the applications that they can execute
      and data they can read might also be denied if all of the access roles that
      could execute or read them, respectively, have been locked out.
  name: lockout
  parents:
    successfulLockout:
    - null
  ttc: null
  type: or
- asset: Identity
  children:
    attemptLockout:
    - null
  description:
    developer: Only lockout an identity if all of the Credentials that could be used
      to authenticate have been denied.
  name: lockoutFromCredentials
  parents:
    deny:
    - IdentityCredentials:
        fieldname: credentials
        next_association: {}
  ttc: null
  type: and
- asset: Identity
  children:
    weakCredentials:
    - IdentityCredentials:
        fieldname: credentials
        next_association: {}
  description:
    developer: If there are no Users asociated with this Identity we make the worst
      case scenario assumption regarding the strength of the Credentials belonging
      to it.
  name: missingUser
  parents: {}
  ttc: null
  type: notExist
- asset: Identity
  children:
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptUnsafeUserActivity
  parents:
    unsafeUserActivity:
    - UserAssignedIdentities:
        fieldname: users
        next_association: {}
  ttc: null
  type: or
- asset: Identity
  children:
    unsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUnsafeUserActivity
  parents:
    attemptUnsafeUserActivity:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Identity
  children:
    attemptUnsafeUserActivity:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivApps
        next_association: {}
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivApps
        next_association: {}
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
  description:
    user: Propagate unsafe user activity to any Applications or subset of privileges
      associated with this Identity.
  name: unsafeUserActivity
  parents:
    successfulUnsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to read the information. They may still be unable to
      extract it, which represents the adversary being able to read it themselves.
      This is the case if autonomous code is able to read it, but lack the required
      networking connections to transmit it back to the adversary.
  name: read
  parents:
    attemptReadFromReplica:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    attemptAssume:
    - null
    delete:
    - null
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to write the information.
  name: write
  parents:
    attemptWriteFromReplica:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    deny:
    - null
  description:
    user: The attacker is able to delete the information.
  name: delete
  parents:
    attemptDeleteFromReplica:
    - null
    write:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    attemptLockout:
    - null
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
  description:
    user: The attacker is able to deny the information.
  name: deny
  parents:
    attemptDenyFromReplica:
    - null
    delete:
    - null
  ttc: null
  type: or
- asset: Privileges
  children: {}
  description:
    user: The attacker is able to extract the information. This means that they have
      a path available through which they can transfer the information back to a system
      that they control.
  name: extract
  parents:
    attemptExtractFromReplica:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    read:
    - null
  description:
    developer: Reading one replica allows the attacker to read all other replicas
      as well since the information contained in them is the same.
  name: attemptReadFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Privileges
  children:
    write:
    - null
  description:
    developer: Information can be overwritten only if all replicas have been overwritten.
  name: attemptWriteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Privileges
  children:
    delete:
    - null
  description:
    developer: Information can be deleted only if all replicas have been deleted.
  name: attemptDeleteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Privileges
  children:
    deny:
    - null
  description:
    developer: Information can be denied only if all replicas have been denied.
  name: attemptDenyFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Privileges
  children:
    extract:
    - null
  description:
    developer: The attacker attempts to extract the information.
  name: attemptExtractFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Privileges
  children:
    successfulAssume:
    - null
    successfulLockout:
    - null
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    mitre: 'Used for M1026: Privileged Account Management, M1025: Privileged Process
      Integrity, M1022: Restrict File and Directory Permissions, M1052: User Account
      Control, M1018: User Account Management, M1024: Restrict Registry Permissions,
      M1043: Credential Access Protection, M1057: Data Loss Prevention'
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility that the IAM object does not
      actually exist.
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: Privileges
  children:
    successfulAssume:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAssume
  parents:
    assume:
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    write:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    assume:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAssume
  parents:
    attemptAssume:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Privileges
  children:
    attemptAssume:
    - AccountManagement:
        fieldname: managedIAMs
        next_association: {}
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    authenticate:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivApps
        next_association: {}
    authorizedApplicationRespondConnectFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    authorizedDeleteFromIAM:
    - DeletePrivileges:
        fieldname: deletePrivData
        next_association: {}
    authorizedReadFromIAM:
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    authorizedWriteFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    specificAccessAuthenticate:
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivApps
        next_association: {}
  description:
    user: When an attacker is able to assume an IAM asset the privileges associated
      with it can always be exploited, other behaviour is asset specific.
  name: assume
  parents:
    successfulAssume:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    successfulLockout:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptLockout
  parents:
    deny:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    lockout:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulLockout
  parents:
    attemptLockout:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Privileges
  children:
    denyFromLockout:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    lockout:
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
  description:
    user: The Identity, Group, or Privileges has been locked out and cannot be used
      by legitimate users. This means that the applications that they can execute
      and data they can read might also be denied if all of the access roles that
      could execute or read them, respectively, have been locked out.
  name: lockout
  parents:
    lockout:
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    successfulLockout:
    - null
  ttc: null
  type: or
- asset: Privileges
  children:
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptUnsafeUserActivity
  parents:
    unsafeUserActivity:
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
    - HasPrivileges:
        fieldname: IAMOwners
        next_association: {}
  ttc: null
  type: or
- asset: Privileges
  children:
    unsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUnsafeUserActivity
  parents:
    attemptUnsafeUserActivity:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Privileges
  children:
    attemptUnsafeUserActivity:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivApps
        next_association: {}
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivApps
        next_association: {}
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
  description:
    user: Propagate unsafe user activity to any Applications or subset of privileges
      associated with these Privileges.
  name: unsafeUserActivity
  parents:
    successfulUnsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to read the information. They may still be unable to
      extract it, which represents the adversary being able to read it themselves.
      This is the case if autonomous code is able to read it, but lack the required
      networking connections to transmit it back to the adversary.
  name: read
  parents:
    attemptReadFromReplica:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    attemptAssume:
    - null
    delete:
    - null
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to write the information.
  name: write
  parents:
    attemptWriteFromReplica:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    deny:
    - null
  description:
    user: The attacker is able to delete the information.
  name: delete
  parents:
    attemptDeleteFromReplica:
    - null
    write:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    attemptLockout:
    - null
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
  description:
    user: The attacker is able to deny the information.
  name: deny
  parents:
    attemptDenyFromReplica:
    - null
    delete:
    - null
  ttc: null
  type: or
- asset: Group
  children: {}
  description:
    user: The attacker is able to extract the information. This means that they have
      a path available through which they can transfer the information back to a system
      that they control.
  name: extract
  parents:
    attemptExtractFromReplica:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    read:
    - null
  description:
    developer: Reading one replica allows the attacker to read all other replicas
      as well since the information contained in them is the same.
  name: attemptReadFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Group
  children:
    write:
    - null
  description:
    developer: Information can be overwritten only if all replicas have been overwritten.
  name: attemptWriteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Group
  children:
    delete:
    - null
  description:
    developer: Information can be deleted only if all replicas have been deleted.
  name: attemptDeleteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Group
  children:
    deny:
    - null
  description:
    developer: Information can be denied only if all replicas have been denied.
  name: attemptDenyFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Group
  children:
    extract:
    - null
  description:
    developer: The attacker attempts to extract the information.
  name: attemptExtractFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Group
  children:
    successfulAssume:
    - null
    successfulLockout:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    mitre: 'Used for M1026: Privileged Account Management, M1025: Privileged Process
      Integrity, M1022: Restrict File and Directory Permissions, M1052: User Account
      Control, M1018: User Account Management, M1024: Restrict Registry Permissions,
      M1043: Credential Access Protection, M1057: Data Loss Prevention'
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility that the IAM object does not
      actually exist.
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: Group
  children:
    successfulAssume:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAssume
  parents:
    assume:
    - MemberOf:
        fieldname: groupIds
        next_association: {}
    - MemberOf:
        fieldname: childGroups
        next_association: {}
    write:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    assume:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAssume
  parents:
    attemptAssume:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Group
  children:
    attemptAssume:
    - AccountManagement:
        fieldname: managedIAMs
        next_association: {}
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
    - MemberOf:
        fieldname: parentGroup
        next_association: {}
    authenticate:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - HighPrivilegeApplicationAccess:
        fieldname: highPrivApps
        next_association: {}
    authorizedApplicationRespondConnectFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    authorizedDeleteFromIAM:
    - DeletePrivileges:
        fieldname: deletePrivData
        next_association: {}
    authorizedReadFromIAM:
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    authorizedWriteFromIAM:
    - WritePrivileges:
        fieldname: writePrivData
        next_association: {}
    specificAccessAuthenticate:
    - LowPrivilegeApplicationAccess:
        fieldname: lowPrivApps
        next_association: {}
  description:
    user: When an attacker is able to assume an IAM asset the privileges associated
      with it can always be exploited, other behaviour is asset specific.
  name: assume
  parents:
    successfulAssume:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    successfulLockout:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptLockout
  parents:
    deny:
    - null
    lockoutFromMembers:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    lockout:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulLockout
  parents:
    attemptLockout:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Group
  children:
    denyFromLockout:
    - ExecutionPrivilegeAccess:
        fieldname: execPrivApps
        next_association: {}
    - ReadPrivileges:
        fieldname: readPrivData
        next_association: {}
    lockout:
    - HasPrivileges:
        fieldname: subprivileges
        next_association: {}
  description:
    user: The Identity, Group, or Privileges has been locked out and cannot be used
      by legitimate users. This means that the applications that they can execute
      and data they can read might also be denied if all of the access roles that
      could execute or read them, respectively, have been locked out.
  name: lockout
  parents:
    successfulLockout:
    - null
  ttc: null
  type: or
- asset: Group
  children:
    attemptLockout:
    - null
  description:
    developer: If all of the Identities belonging to a Group are lockedout we assume
      that the Group as a whole is lockedout.
  name: lockoutFromMembers
  parents:
    lockout:
    - MemberOf:
        fieldname: groupIds
        next_association: {}
  ttc: null
  type: and
- asset: Credentials
  children:
    attemptUse:
    - null
    read:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to read the information. They may still be unable to
      extract it, which represents the adversary being able to read it themselves.
      This is the case if autonomous code is able to read it, but lack the required
      networking connections to transmit it back to the adversary.
  name: read
  parents:
    attemptReadFromReplica:
    - null
  ttc: null
  type: or
- asset: Credentials
  children:
    attemptUse:
    - null
    delete:
    - null
    fullAccess:
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    write:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
  description:
    user: The attacker is able to write the information.
  name: write
  parents:
    attemptWriteFromReplica:
    - null
  ttc: null
  type: or
- asset: Credentials
  children:
    delete:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    deny:
    - null
  description:
    user: The attacker is able to delete the information.
  name: delete
  parents:
    attemptDeleteFromReplica:
    - null
    write:
    - null
  ttc: null
  type: or
- asset: Credentials
  children:
    deny:
    - Replica:
        fieldname: dataReplicas
        next_association: {}
    - InfoContainment:
        fieldname: containerData
        next_association: {}
    - Dependence:
        fieldname: dependentApps
        next_association: {}
    lockoutFromCredentials:
    - IdentityCredentials:
        fieldname: identities
        next_association: {}
  description:
    user: The attacker is able to deny the information.
  name: deny
  parents:
    attemptDenyFromReplica:
    - null
    delete:
    - null
  ttc: null
  type: or
- asset: Credentials
  children: {}
  description:
    user: The attacker is able to extract the information. This means that they have
      a path available through which they can transfer the information back to a system
      that they control.
  name: extract
  parents:
    attemptExtractFromReplica:
    - null
  ttc: null
  type: or
- asset: Credentials
  children:
    read:
    - null
  description:
    developer: Reading one replica allows the attacker to read all other replicas
      as well since the information contained in them is the same.
  name: attemptReadFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Credentials
  children:
    write:
    - null
  description:
    developer: Information can be overwritten only if all replicas have been overwritten.
  name: attemptWriteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Credentials
  children:
    delete:
    - null
  description:
    developer: Information can be deleted only if all replicas have been deleted.
  name: attemptDeleteFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Credentials
  children:
    deny:
    - null
  description:
    developer: Information can be denied only if all replicas have been denied.
  name: attemptDenyFromReplica
  parents: {}
  ttc: null
  type: and
- asset: Credentials
  children:
    extract:
    - null
  description:
    developer: The attacker attempts to extract the information.
  name: attemptExtractFromReplica
  parents: {}
  ttc: null
  type: or
- asset: Credentials
  children:
    useLeakedCredentials:
    - null
  description:
    user: Describes the case where the password/credential is leaked to some location,
      it can then be available to the attacker.
  name: notDisclosed
  parents: {}
  ttc:
    arguments: []
    name: Enabled
    type: function
  type: defense
- asset: Credentials
  children:
    guessCredentials:
    - null
  description:
    user: Describes if the credentials can be guessed by the attacker(i.e. they represent
      a password or passphrase).
  name: notGuessable
  parents: {}
  ttc:
    arguments: []
    name: Enabled
    type: function
  type: defense
- asset: Credentials
  children:
    credentialsReuse:
    - null
    propagateOneCredentialCompromised:
    - null
  description:
    user: Describes if the credentials are known to be unique and therefore cannot
      be used in a credentials reuse attack.
  name: unique
  parents: {}
  ttc:
    arguments: []
    name: Enabled
    type: function
  type: defense
- asset: Credentials
  children:
    credentialTheft:
    - null
  description:
    user: Describes if the credentials cannot be phished(they are biometric, e.g.
      fingerprints or iris scans, or physical, e.g. access cards or keys, elements).
  name: notPhishable
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: Credentials
  children:
    attemptUse:
    - null
  description:
    user: If the password/credential is leaked to some location, it can then be available
      to the attacker and therefore it can be used.
  name: useLeakedCredentials
  parents:
    notDisclosed:
    - null
  ttc:
    arguments: []
    name: EasyAndCertain
    type: function
  type: or
- asset: Credentials
  children:
    attemptCredentialsReuse:
    - ConditionalAuthentication:
        fieldname: requiredFactors
        next_association: {}
    credentialsReuse:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptCredentialsReuse
  parents:
    attemptCredentialsReuse:
    - ConditionalAuthentication:
        fieldname: credentials
        next_association: {}
    passwordReuseCompromise:
    - IdentityCredentials:
        fieldname: identities
        next_association:
          UserAssignedIdentities:
            fieldname: users
            next_association: {}
  ttc: null
  type: or
- asset: Credentials
  children:
    attemptUse:
    - null
  description:
    developer: The user is reusing credentials which means that the attacker is able
      to compromise all of the non-unique credentials associated with this user.
  name: credentialsReuse
  parents:
    attemptCredentialsReuse:
    - null
    unique:
    - null
  ttc: null
  type: and
- asset: Credentials
  children:
    use:
    - null
  description:
    developer: In order to use these credentials the attacker may require additional
      factors.
  name: attemptUse
  parents:
    credentialTheft:
    - null
    credentialsReuse:
    - null
    guessCredentials:
    - null
    read:
    - null
    use:
    - HashedCredentials:
        fieldname: origCreds
        next_association: {}
    useLeakedCredentials:
    - null
    write:
    - null
  ttc: null
  type: or
- asset: Credentials
  children:
    accessDecryptedData:
    - EncryptionCredentials:
        fieldname: encryptedData
        next_association: {}
    accessSpoofedData:
    - SigningCredentials:
        fieldname: signedData
        next_association: {}
    attemptAssume:
    - IdentityCredentials:
        fieldname: identities
        next_association: {}
    attemptPropagateOneCredentialCompromised:
    - null
    attemptUse:
    - HashedCredentials:
        fieldname: hashes
        next_association: {}
    guessCredentialsFromHash:
    - HashedCredentials:
        fieldname: origCreds
        next_association: {}
    use:
    - ConditionalAuthentication:
        fieldname: credentials
        next_association: {}
  description:
    user: The attacker is using the credentials to perform a legitimate authentication.
  name: use
  parents:
    attemptUse:
    - null
    use:
    - ConditionalAuthentication:
        fieldname: requiredFactors
        next_association: {}
  ttc: null
  type: and
- asset: Credentials
  children:
    propagateOneCredentialCompromised:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptPropagateOneCredentialCompromised
  parents:
    use:
    - null
  ttc: null
  type: or
- asset: Credentials
  children:
    oneCredentialCompromised:
    - transitive:
        ConditionalAuthentication:
          fieldname: credentials
          next_association:
            IdentityCredentials:
              fieldname: identities
              next_association:
                UserAssignedIdentities:
                  fieldname: users
                  next_association: {}
  description:
    developer: Intermediate step used to propagate the credentials reuse attack step.
  name: propagateOneCredentialCompromised
  parents:
    attemptPropagateOneCredentialCompromised:
    - null
    unique:
    - null
  ttc: null
  type: and
- asset: Credentials
  children:
    attemptCredentialTheft:
    - ConditionalAuthentication:
        fieldname: requiredFactors
        next_association: {}
    credentialTheft:
    - null
  description:
    developer: The attacker is attempting to access the credentials.
  name: attemptCredentialTheft
  parents:
    attemptCredentialTheft:
    - ConditionalAuthentication:
        fieldname: credentials
        next_association: {}
    credentialTheft:
    - IdentityCredentials:
        fieldname: identities
        next_association:
          UserAssignedIdentities:
            fieldname: users
            next_association: {}
  ttc: null
  type: or
- asset: Credentials
  children:
    attemptUse:
    - null
  description:
    developer: The attacker is able to steal the credentials.
  name: credentialTheft
  parents:
    attemptCredentialTheft:
    - null
    notPhishable:
    - null
  ttc: null
  type: and
- asset: Credentials
  children:
    weakCredentials:
    - null
  description:
    developer: If there are no Identities asociated with these Credentials we make
      the worst case scenario assumption regarding the strength of the Credentials.
  name: missingIdentity
  parents: {}
  ttc: null
  type: notExist
- asset: Credentials
  children:
    guessCredentials:
    - null
    weakCredentials:
    - ConditionalAuthentication:
        fieldname: requiredFactors
        next_association: {}
  description:
    developer: Intermediate step used to represent how weak the credentials the user
      employs are. This is inversely related to the securityAwareness defense on the
      User asset associated with the Identity to which these Credentials belong. If
      either the User or Identity associations are missing the assumption is made
      that the crentials are weak and therefore guessable by the attacker.
  name: weakCredentials
  parents:
    missingIdentity:
    - null
    missingUser:
    - IdentityCredentials:
        fieldname: identities
        next_association: {}
    weakCredentials:
    - ConditionalAuthentication:
        fieldname: credentials
        next_association: {}
    - IdentityCredentials:
        fieldname: identities
        next_association:
          UserAssignedIdentities:
            fieldname: users
            next_association: {}
  ttc: null
  type: or
- asset: Credentials
  children:
    guessCredentialsFromHash:
    - null
  description:
    developer: If there are no associated hashes the assumption is that the credentials
      are guessable without any additional requirements.
  name: credsHashed
  parents: {}
  ttc: null
  type: notExist
- asset: Credentials
  children:
    guessCredentials:
    - null
  description:
    developer: If hashes are associated with this Credentials asset the assumption
      is that one of those hashes is required by the attacker to be able to perform
      a guessing attack.
  name: guessCredentialsFromHash
  parents:
    credsHashed:
    - null
    use:
    - HashedCredentials:
        fieldname: hashes
        next_association: {}
  ttc: null
  type: or
- asset: Credentials
  children:
    attemptUse:
    - null
  description:
    developer: The attacker can try to just guess a set of credentials. The likelihood
      of succeeding is dependent on how strong the credentials are.
    modeler: The guessability of the Credentials is influenced by the notGuessable
      defense on this asset and the securityAwareness defense on the User associated
      with the Identity that these Credentials belong to. If either the User or Identity
      associations are missing the assumption is made that the crentials are guessable
      and only the notGuessable defense would play a role in restricting this attack
      step.
  name: guessCredentials
  parents:
    guessCredentialsFromHash:
    - null
    notGuessable:
    - null
    weakCredentials:
    - null
  ttc:
    arguments: []
    name: HardAndUncertain
    type: function
  type: and
- asset: User
  children:
    passwordReuseCompromise:
    - null
  description:
    user: If one credential of that user is compromised there is a probability that
      all other credentials of that user are also compromised.
  name: noPasswordReuse
  parents: {}
  ttc:
    arguments: []
    name: Enabled
    type: function
  type: defense
- asset: User
  children:
    successfulDeliverMaliciousRemovableMedia:
    - null
  description:
    user: The user does not utilise removable media and therefore the attack steps
      associated with it cannot be reached.
  name: noRemovableMediaUsage
  parents: {}
  ttc:
    arguments: []
    name: Enabled
    type: function
  type: defense
- asset: User
  children:
    securityAwarenessBypassed:
    - null
    weakCredentials:
    - null
  description:
    user: The security awareness of the user makes it less likely that social engineering
      would be successful and reduces the likelihood that the user will engage in
      unsafe behaviour.
  name: securityAwareness
  parents: {}
  ttc: null
  type: defense
- asset: User
  children:
    securityAwarenessBypassed:
    - null
  description:
    user: Security awareness can be bypassed.
  name: bypassSecurityAwareness
  parents:
    attemptDeliverMaliciousRemovableMedia:
    - null
    attemptSocialEngineering:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: User
  children:
    successfulDeliverMaliciousRemovableMedia:
    - null
    successfulSocialEngineering:
    - null
  description:
    developer: Security awareness is bypassed either because it was not set, the attacker
      was able to circumvent it through additional effort, or we simply assume that
      everyone has an off day every now and then.
  name: securityAwarenessBypassed
  parents:
    bypassSecurityAwareness:
    - null
    securityAwareness:
    - null
  ttc: null
  type: or
- asset: User
  children:
    passwordReuseCompromise:
    - null
  description:
    developer: This intermediate attack step is needed in order to block passwordReuseCompromise
      when no other credential is first compromised.
  name: oneCredentialCompromised
  parents:
    propagateOneCredentialCompromised:
    - UserAssignedIdentities:
        fieldname: userIds
        next_association:
          IdentityCredentials:
            fieldname: credentials
            next_association:
              transitive:
                ConditionalAuthentication:
                  fieldname: requiredFactors
                  next_association: {}
  ttc: null
  type: or
- asset: User
  children:
    attemptCredentialsReuse:
    - UserAssignedIdentities:
        fieldname: userIds
        next_association:
          IdentityCredentials:
            fieldname: credentials
            next_association: {}
  description:
    developer: If one reused credential of that user is compromised then, all other
      credentials of that user can also be compromised.
  name: passwordReuseCompromise
  parents:
    noPasswordReuse:
    - null
    oneCredentialCompromised:
    - null
  ttc: null
  type: and
- asset: User
  children:
    weakCredentials:
    - UserAssignedIdentities:
        fieldname: userIds
        next_association:
          IdentityCredentials:
            fieldname: credentials
            next_association: {}
  description:
    developer: Intermediate attack step that defines the strength of all of the Credentials
      associated with the user. This is inversely proportional with the user's securityAwareness
      defense.
  name: weakCredentials
  parents:
    securityAwareness:
    - null
  ttc: null
  type: or
- asset: User
  children:
    bypassSecurityAwareness:
    - null
    successfulSocialEngineering:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
    modeler: Social engineering is modeled by having the attacker trigger this attack
      step on the target Users.
    user: An attacker can try to perform social engineering techniques such as phishing
      and inducing the user to perform malicious actions.
  name: attemptSocialEngineering
  parents: {}
  ttc: null
  type: or
- asset: User
  children:
    socialEngineering:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulSocialEngineering
  parents:
    attemptSocialEngineering:
    - null
    securityAwarenessBypassed:
    - null
  ttc: null
  type: and
- asset: User
  children:
    credentialTheft:
    - null
    unsafeUserActivity:
    - null
  description:
    developer: Currently social engineering entails phishing credentials and tricking
      the user into unsafe actions that expose Applications to the attacker. In the
      future, other social engineering techniques should be added to this attack step.
  name: socialEngineering
  parents:
    successfulSocialEngineering:
    - null
  ttc: null
  type: or
- asset: User
  children:
    bypassSecurityAwareness:
    - null
    successfulDeliverMaliciousRemovableMedia:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
    modeler: Social engineering is modeled by having the attacker trigger this attack
      step on hthe target Users.
    user: An attacker can try to deliver a removable media drive(i.e. USB drive) containing
      malicious code to a location accessible to the target users.
  name: attemptDeliverMaliciousRemovableMedia
  parents:
    spreadWormThroughRemovableMedia:
    - union:
        left:
          HardwareAccess:
            fieldname: hardwareSystems
            next_association: {}
        right:
          ZoneAccess:
            fieldname: physicalZones
            next_association:
              ZoneInclusion:
                fieldname: hardwareSystems
                next_association: {}
  ttc: null
  type: or
- asset: User
  children:
    deliverMaliciousRemovableMedia:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulDeliverMaliciousRemovableMedia
  parents:
    attemptDeliverMaliciousRemovableMedia:
    - null
    noRemovableMediaUsage:
    - null
    securityAwarenessBypassed:
    - null
  ttc: null
  type: and
- asset: User
  children:
    attemptAssume:
    - UserAssignedIdentities:
        fieldname: userIds
        next_association: {}
    attemptUnsafeUserActivity:
    - ZoneAccess:
        fieldname: physicalZones
        next_association:
          ZoneInclusion:
            fieldname: hardwareSystems
            next_association: {}
    - HardwareAccess:
        fieldname: hardwareSystems
        next_association: {}
  description:
    developer: The user is assumed to connect the removable media containing the malicious
      code to all of the hardware systems that they have access to. Since this is
      expected to unwittingly happen as part of their normal operations the attack
      exposes their regular security context.
  name: deliverMaliciousRemovableMedia
  parents:
    successfulDeliverMaliciousRemovableMedia:
    - null
  ttc:
    arguments:
    - 0.01
    name: Exponential
    type: function
  type: or
- asset: User
  children:
    attemptCredentialTheft:
    - UserAssignedIdentities:
        fieldname: userIds
        next_association:
          IdentityCredentials:
            fieldname: credentials
            next_association: {}
  description:
    developer: Trick the user into providing their credentials.
    modeler: 'Distribution: Bernoulli(0.5) * Exponential(0.1), source: Sommestad (2011)
      Password authentication attacks: a survey of attacks and when they will succeed,
      suggest to use Bernoulli(0.05)'
  name: credentialTheft
  parents:
    socialEngineering:
    - null
  ttc:
    arguments: []
    name: HardAndUncertain
    type: function
  type: or
- asset: User
  children:
    attemptAssume:
    - UserAssignedIdentities:
        fieldname: userIds
        next_association: {}
    attemptUnsafeUserActivity:
    - UserAssignedIdentities:
        fieldname: userIds
        next_association: {}
  description:
    developer: The user can engage in unsafe behaviour that could allow the attacker
      to gain access to the applications the user has access to.
    modeler: If the attacker is not able to reach (or be reached) via any of the Applications
      this garnered access does not materialise into any actual attack vectors.
  name: unsafeUserActivity
  parents:
    socialEngineering:
    - null
  ttc:
    arguments:
    - 0.03
    name: Exponential
    type: function
  type: or
- asset: Network
  children:
    attemptAccessInspectedFromPhysicalAccess:
    - null
    attemptAccessUninspectedFromPhysicalAccess:
    - null
    bypassAdversaryInTheMiddleDefenseFromPhysicalAccess:
    - null
    bypassEavesdropDefenseFromPhysicalAccess:
    - null
    deny:
    - null
  description:
    modeler: This attack step can be used as an entry point when analyzing scenarios
      that involve gaining physical access to assets.
    user: Attacker has physical access on the network. This means they can cut wires/fibers,
      connect using iLOs, eavesdrop and get proper network access.
  name: physicalAccess
  parents:
    gainPhysicalAccess:
    - ZoneInclusion:
        fieldname: physicalZones
        next_association: {}
  ttc: null
  type: or
- asset: Network
  children:
    eavesdropDefenseBypassed:
    - null
  description:
    user: The eavesdrop defense can be bypassed more easily if the attacker has physical
      access to the network. This attack step will add its impact to the unconditional
      bypass.
  name: bypassEavesdropDefenseFromPhysicalAccess
  parents:
    physicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    adversaryInTheMiddleDefenseBypassed:
    - null
  description:
    user: The adversary in the middle defense can be bypassed more easily if the attacker
      has physical access to the network. This attack step will add its impact to
      the unconditional bypass.
  name: bypassAdversaryInTheMiddleDefenseFromPhysicalAccess
  parents:
    physicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    accessControlBypassed:
    - null
  description:
    user: Access control protects from unauthorized physical access on the network.
  name: networkAccessControl
  parents: {}
  ttc: null
  type: defense
- asset: Network
  children:
    accessControlBypassed:
    - null
  description:
    user: If access control is enabled, the attacker can still try to bypass it and
      gain access on the network.
  name: bypassAccessControl
  parents:
    attemptAccessInspectedFromPhysicalAccess:
    - null
    attemptAccessUninspectedFromPhysicalAccess:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Network
  children:
    successfulAccessInspectedFromPhysicalAccess:
    - null
    successfulAccessUninspectedFromPhysicalAccess:
    - null
  description:
    developer: Access control is bypassed either because it was not set, the attacker
      was able to circumvent it through additional effort.
  name: accessControlBypassed
  parents:
    bypassAccessControl:
    - null
    networkAccessControl:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    bypassAccessControl:
    - null
    successfulAccessUninspectedFromPhysicalAccess:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptAccessUninspectedFromPhysicalAccess
  parents:
    physicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    bypassAccessControl:
    - null
    successfulAccessInspectedFromPhysicalAccess:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptAccessInspectedFromPhysicalAccess
  parents:
    physicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    accessUninspected:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAccessUninspectedFromPhysicalAccess
  parents:
    accessControlBypassed:
    - null
    attemptAccessUninspectedFromPhysicalAccess:
    - null
  ttc: null
  type: and
- asset: Network
  children:
    accessInspected:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAccessInspectedFromPhysicalAccess
  parents:
    accessControlBypassed:
    - null
    attemptAccessInspectedFromPhysicalAccess:
    - null
  ttc: null
  type: and
- asset: Network
  children:
    accessNetworkData:
    - null
    attemptConnectToApplicationsUninspected:
    - union:
        left:
          NetworkConnection:
            fieldname: netConnections
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outgoingNetConnections
            next_association: {}
    attemptReverseReach:
    - null
    deny:
    - null
    networkConnectUninspected:
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    networkForwardingUninspected:
    - null
  description:
    user: Uninspected access provides connect to all reachable applications without
      any restrictions.
  name: accessUninspected
  parents:
    accessNetworkAndConnections:
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    accessNetworksUninspected:
    - union:
        left:
          union:
            left:
              NetworkConnection:
                fieldname: netConnections
                next_association: {}
            right:
              InNetworkConnection:
                fieldname: ingoingNetConnections
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeIngoingNetConnections
            next_association: {}
    fullAccess:
    - union:
        left:
          union:
            left:
              union:
                left:
                  NetworkConnection:
                    fieldname: netConnections
                    next_association:
                      FirewallConnectionRule:
                        fieldname: routingFirewalls
                        next_association: {}
                right:
                  OutNetworkConnection:
                    fieldname: outgoingNetConnections
                    next_association:
                      FirewallConnectionRule:
                        fieldname: routingFirewalls
                        next_association: {}
            right:
              InNetworkConnection:
                fieldname: ingoingNetConnections
                next_association:
                  FirewallConnectionRule:
                    fieldname: routingFirewalls
                    next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeIngoingNetConnections
            next_association:
              FirewallConnectionRule:
                fieldname: routingFirewalls
                next_association: {}
    successfulAccessUninspectedFromPhysicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    accessNetworkData:
    - null
    attemptConnectToApplicationsInspected:
    - union:
        left:
          NetworkConnection:
            fieldname: netConnections
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outgoingNetConnections
            next_association: {}
    deny:
    - null
    networkConnectInspected:
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    networkForwardingInspected:
    - null
  description:
    user: Inspected access provides connect to all reachable applications, but with
      limitations.
  name: accessInspected
  parents:
    accessNetworkAndConnections:
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    accessNetworksInspected:
    - union:
        left:
          union:
            left:
              NetworkConnection:
                fieldname: netConnections
                next_association: {}
            right:
              InNetworkConnection:
                fieldname: ingoingNetConnections
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeIngoingNetConnections
            next_association: {}
    successfulAccessInspectedFromPhysicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    reverseReach:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptReverseReach
  parents:
    accessUninspected:
    - null
    reverseReach:
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    - NetworkExposure:
        fieldname: applications
        next_association: {}
    - union:
        left:
          NetworkConnection:
            fieldname: netConnections
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outgoingNetConnections
            next_association: {}
  ttc: null
  type: or
- asset: Network
  children:
    attemptReverseReach:
    - union:
        left:
          union:
            left:
              NetworkConnection:
                fieldname: netConnections
                next_association: {}
            right:
              InNetworkConnection:
                fieldname: ingoingNetConnections
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeIngoingNetConnections
            next_association: {}
    - NetworkExposure:
        fieldname: applications
        next_association: {}
  description:
    developer: Reverse reach is used to determine whether or not the attacker can
      be reached by the user. Reverse reach propagates toward outgoing or bidirectional
      communications.
  name: reverseReach
  parents:
    attemptReverseReach:
    - null
  ttc: null
  type: and
- asset: Network
  children:
    attemptAccessNetworksUninspected:
    - union:
        left:
          NetworkConnection:
            fieldname: netConnections
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outgoingNetConnections
            next_association: {}
    attemptConnectToApplicationsUninspected:
    - union:
        left:
          NetworkConnection:
            fieldname: netConnections
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outgoingNetConnections
            next_association: {}
    networkForwardingInspected:
    - null
  description:
    developer: By using the allowed connections (connection rules), uninspected forwarding
      from one network to another network or applications can happen.
  name: networkForwardingUninspected
  parents:
    accessUninspected:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    attemptAccessNetworksInspected:
    - union:
        left:
          NetworkConnection:
            fieldname: netConnections
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outgoingNetConnections
            next_association: {}
    attemptConnectToApplicationsInspected:
    - union:
        left:
          NetworkConnection:
            fieldname: netConnections
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outgoingNetConnections
            next_association: {}
  description:
    developer: By using the allowed connections (connection rules), inspected forwarding
      from one network to another network or applications can happen.
  name: networkForwardingInspected
  parents:
    accessInspected:
    - null
    networkForwardingUninspected:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    attemptDeny:
    - union:
        left:
          union:
            left:
              union:
                left:
                  NetworkConnection:
                    fieldname: netConnections
                    next_association: {}
                right:
                  InNetworkConnection:
                    fieldname: ingoingNetConnections
                    next_association: {}
            right:
              OutNetworkConnection:
                fieldname: outgoingNetConnections
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeIngoingNetConnections
            next_association: {}
    denyFromNetworkingAsset:
    - union:
        left:
          NetworkExposure:
            fieldname: applications
            next_association: {}
        right:
          union:
            left:
              union:
                left:
                  union:
                    left:
                      NetworkConnection:
                        fieldname: netConnections
                        next_association:
                          ApplicationConnection:
                            fieldname: applications
                            next_association: {}
                    right:
                      InNetworkConnection:
                        fieldname: ingoingNetConnections
                        next_association:
                          ApplicationConnection:
                            fieldname: applications
                            next_association: {}
                right:
                  OutNetworkConnection:
                    fieldname: outgoingNetConnections
                    next_association:
                      ApplicationConnection:
                        fieldname: applications
                        next_association: {}
            right:
              DiodeInNetworkConnection:
                fieldname: diodeIngoingNetConnections
                next_association:
                  ApplicationConnection:
                    fieldname: applications
                    next_association: {}
  description:
    user: If a DoS is performed it affects, the applications communicating over the
      network as well as the connected application.
  name: deny
  parents:
    accessInspected:
    - null
    accessUninspected:
    - null
    physicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    attemptAdversaryInTheMiddle:
    - null
    attemptEavesdrop:
    - null
  description:
    developer: Access also the data that are network-wide available.
  name: accessNetworkData
  parents:
    accessInspected:
    - null
    accessUninspected:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    eavesdropDefenseBypassed:
    - null
  description:
    modeler: If this defense is enabled, attacks such as ARP spoofing should however,
      still be possible.
    user: This defense protects from eavesdrop attacks. If this defense is disabled,
      then it is equivalent to the network being considered a broadcast network.
  name: eavesdropDefense
  parents: {}
  ttc: null
  type: defense
- asset: Network
  children:
    eavesdropDefenseBypassed:
    - null
  description:
    user: The eavesdrop defense can be bypassed.
  name: bypassEavesdropDefense
  parents:
    attemptEavesdrop:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Network
  children:
    successfulEavesdrop:
    - null
  description:
    developer: The Eavesdrop defense is bypassed either because it was not set, the
      attacker was able to circumvent it through additional effort.
  name: eavesdropDefenseBypassed
  parents:
    bypassEavesdropDefense:
    - null
    bypassEavesdropDefenseFromPhysicalAccess:
    - null
    eavesdropDefense:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    bypassEavesdropDefense:
    - null
    successfulEavesdrop:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptEavesdrop
  parents:
    accessNetworkData:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    eavesdrop:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulEavesdrop
  parents:
    attemptEavesdrop:
    - null
    eavesdropDefenseBypassed:
    - null
  ttc: null
  type: and
- asset: Network
  children:
    attemptRead:
    - DataInTransit:
        fieldname: transitData
        next_association: {}
  description:
    user: An attacker that performs an eavesdrop attack on a network tries to access
      all the transferred data over that network.
  name: eavesdrop
  parents:
    adversaryInTheMiddle:
    - null
    successfulEavesdrop:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    adversaryInTheMiddleDefenseBypassed:
    - null
  description:
    user: This defense protects against adversary-in-the-middle (AitM) attacks that
      are originating either form the network layer (like ARP spoofing) or by manipulating
      the higher network layers (like DNS poisoning).
  name: adversaryInTheMiddleDefense
  parents: {}
  ttc: null
  type: defense
- asset: Network
  children:
    adversaryInTheMiddleDefenseBypassed:
    - null
  description:
    user: The adversary in the middle defense can be bypassed.
  name: bypassAdversaryInTheMiddleDefense
  parents:
    attemptAdversaryInTheMiddle:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: Network
  children:
    successfulAdversaryInTheMiddle:
    - null
  description:
    developer: The adversary in the middle defense is bypassed either because it was
      not set, the attacker was able to circumvent it through additional effort.
  name: adversaryInTheMiddleDefenseBypassed
  parents:
    adversaryInTheMiddleDefense:
    - null
    bypassAdversaryInTheMiddleDefense:
    - null
    bypassAdversaryInTheMiddleDefenseFromPhysicalAccess:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    bypassAdversaryInTheMiddleDefense:
    - null
    successfulAdversaryInTheMiddle:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptAdversaryInTheMiddle
  parents:
    accessNetworkData:
    - null
  ttc: null
  type: or
- asset: Network
  children:
    adversaryInTheMiddle:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAdversaryInTheMiddle
  parents:
    adversaryInTheMiddleDefenseBypassed:
    - null
    attemptAdversaryInTheMiddle:
    - null
  ttc: null
  type: and
- asset: Network
  children:
    attemptApplicationRespondConnect:
    - DataInTransit:
        fieldname: transitData
        next_association: {}
    attemptWrite:
    - DataInTransit:
        fieldname: transitData
        next_association: {}
    eavesdrop:
    - null
  description:
    user: An attacker that performs a AitM attack on a network tries to read and modify
      all the transferred data over that network.
  name: adversaryInTheMiddle
  parents:
    successfulAdversaryInTheMiddle:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    denyFromSoftProdVulnerability:
    - null
    fullAccessFromSupplyChainCompromise:
    - null
    localAccess:
    - null
    modifyFromSoftProdVulnerability:
    - null
    networkAccess:
    - null
    networkConnectFromResponse:
    - null
    readFromSoftProdVulnerability:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
    successfulApplicationRespondConnectThroughData:
    - null
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
    successfulDeny:
    - null
    successfulModify:
    - null
    successfulRead:
    - null
    successfulReverseReach:
    - null
    successfulUnsafeUserActivity:
    - null
    successfulUseVulnerability:
    - null
  description:
    developer: This defense allows for both speculation about the presence of a particular
      application and to suggest that if it is possible removing it may restrict the
      attacker's actions.
    user: This defense is used to reason about the attack vectors introduced by this
      asset. It should be used to model the possibility that the Application does
      not actually exist. Typically this is useful to see what attack steps are removed
      if a particular non-essential component(e.g. a plugin, library, feature, or
      service).
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: RoutingFirewall
  children:
    bypassEffectiveness:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    successfulUseVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUseVulnerability
  parents:
    localConnect:
    - null
    networkConnectUninspected:
    - null
    specificAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    useVulnerability:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUseVulnerability
  parents:
    attemptUseVulnerability:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptAbuse:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    attemptSoftwareProductAbuse:
    - null
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: This includes vulnerabilities associated with the SoftwareProduct that
      this Application is running as well.
    user: Try to exploit the associated vulnerabilities.
  name: useVulnerability
  parents:
    successfulUseVulnerability:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    successfulReverseReach:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
    modeler: If the entry point of the attacker is an Application this attack step
      needs to be explicitly called on it by the modeler in order to have reverse
      reach start propagating from the Application to the rest of the assets in the
      model. This is the case because no other attack step on the Application asset
      triggers this attack step.
    user: The attacker is reachable from this Application therefore start propagating
      reverse reach from it. Reverse reach is used to determine whether or not the
      attacker can be reached by the user.
  name: attemptReverseReach
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    reverseReach:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulReverseReach
  parents:
    attemptReverseReach:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attemptReverseReach:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: ingoingAppConnections
            next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
    networkConnectFromResponse:
    - null
  description:
    developer: Reverse reach is used to determine whether or not the attacker can
      be reached by the user. Reverse reach propagates toward outgoing or bidirectional
      communications.
  name: reverseReach
  parents:
    successfulReverseReach:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    attemptUseVulnerability:
    - null
    localAccess:
    - null
    localAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    softwareProductVulnerabilityLocalAccessAchieved:
    - null
    specificAccessFromLocalConnection:
    - null
  description:
    user: The attacker can interface with the Application without going through networking
      communications. This is achieved by gaining full access on a hosted Application,
      specific access on the hosting Application, physical access on the hardware
      on which the Application is running, or via unsafe user activity.
  name: localConnect
  parents:
    unsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    attemptUseVulnerability:
    - null
    networkAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    networkConnect:
    - null
    softwareProductVulnerabilityNetworkAccessAchieved:
    - null
    specificAccessNetworkConnect:
    - null
  description:
    user: An attacker can connect to any network exposed application and try to authenticate
      or trigger vulnerabilities.
  name: networkConnectUninspected
  parents:
    networkConnectFromResponse:
    - null
    unsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    networkConnect:
    - null
    specificAccessNetworkConnect:
    - null
  description:
    user: If the network communications occur via any ConnectionRules that have their
      payload inspected the attacker can still authenticate, but they cannot trigger
      vulnerabilities.
  name: networkConnectInspected
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    networkAccess:
    - null
  description:
    developer: Intermediate attack step.
  name: networkConnect
  parents:
    networkConnectInspected:
    - null
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    specificAccessFromNetworkConnection:
    - null
  description:
    developer: Intermediate attack step.
  name: specificAccessNetworkConnect
  parents:
    networkConnectInspected:
    - null
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    accessInspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    accessUninspected:
    - NetworkExposure:
        fieldname: networks
        next_association: {}
    attemptAccessNetworksInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptAccessNetworksUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptConnectToApplicationsInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
    attemptConnectToApplicationsUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: appConnections
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outgoingAppConnections
            next_association: {}
  description:
    developer: The attacker can access outgoing and bidirectional networks and connections
      associated with the application.
  name: accessNetworkAndConnections
  parents:
    fullAccess:
    - null
    specificAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    networkConnectFromResponse:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptNetworkConnectFromResponse
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    networkConnectUninspected:
    - null
  description:
    developer: An attacker may be able to respond to requests submitted by a client
      application.
  name: networkConnectFromResponse
  parents:
    attemptNetworkConnectFromResponse:
    - null
    notPresent:
    - null
    reverseReach:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: and
- asset: RoutingFirewall
  children:
    specificAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for specific access.
  name: specificAccessFromLocalConnection
  parents:
    localConnect:
    - null
    notPresent:
    - null
    specificAccessAuthenticate:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    specificAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for specific access.
  name: specificAccessFromNetworkConnection
  parents:
    notPresent:
    - null
    specificAccessAuthenticate:
    - null
    specificAccessNetworkConnect:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    accessNetworkAndConnections:
    - null
    attemptAuthorizedApplicationRespondConnectThroughData:
    - null
    attemptUseVulnerability:
    - null
    bypassContainerization:
    - null
    localConnect:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    specificAccessDelete:
    - null
    specificAccessModify:
    - null
    specificAccessRead:
    - null
  description:
    user: The adversary is able to gain low-privilege access on the Application which
      allows them to access the networks and connections associated with it and locally
      connect to hosted Applications. Additionally, if they have the required privileges
      the attacker may also access data hosted, sent, or received by the Application.
  name: specificAccess
  parents:
    fullAccess:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    attemptUseVulnerability:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
  description:
    user: The attacker is able to break out of an application container/sandbox and
      try to exploit any vulnerability of the host application.
  name: bypassContainerization
  parents:
    specificAccess:
    - null
  ttc:
    arguments: []
    name: HardAndUncertain
    type: function
  type: or
- asset: RoutingFirewall
  children:
    highPrivilegesAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    localAccess:
    - null
    networkAccess:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - null
  description:
    user: The attacker is able to authenticate with the appropriate high-level privileges.
  name: authenticate
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    lowPrivilegesAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - null
    specificAccessFromLocalConnection:
    - null
    specificAccessFromNetworkConnection:
    - null
  description:
    user: The attacker is able to authenticate with the appropriate low-level privileges.
  name: specificAccessAuthenticate
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for full access.
  name: localAccess
  parents:
    authenticate:
    - null
    localConnect:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack steps for modeling the two requirements (reachability
      and authentication) for full access.
  name: networkAccess
  parents:
    authenticate:
    - null
    networkConnect:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    accessNetworkAndConnections:
    - null
    accessUninspected:
    - union:
        left:
          union:
            left:
              union:
                left:
                  FirewallConnectionRule:
                    fieldname: connectionRules
                    next_association:
                      NetworkConnection:
                        fieldname: networks
                        next_association: {}
                right:
                  FirewallConnectionRule:
                    fieldname: connectionRules
                    next_association:
                      OutNetworkConnection:
                        fieldname: outNetworks
                        next_association: {}
            right:
              FirewallConnectionRule:
                fieldname: connectionRules
                next_association:
                  InNetworkConnection:
                    fieldname: inNetworks
                    next_association: {}
        right:
          FirewallConnectionRule:
            fieldname: connectionRules
            next_association:
              DiodeInNetworkConnection:
                fieldname: diodeInNetworks
                next_association: {}
    attemptApplicationRespondConnectThroughData:
    - null
    attemptAssume:
    - ExecutionPrivilegeAccess:
        fieldname: executionPrivIAMs
        next_association: {}
    attemptDeny:
    - null
    attemptModify:
    - null
    - ManagedBy:
        fieldname: managedRoutingFw
        next_association: {}
    attemptRead:
    - null
    attemptSpreadWormThroughRemovableMedia:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    attemptUseVulnerabilityFromSoftwareFullAccess:
    - SysExecution:
        fieldname: hostHardware
        next_association: {}
    localConnect:
    - AppExecution:
        fieldname: hostApp
        next_association: {}
    networkConnectUninspected:
    - FirewallConnectionRule:
        fieldname: connectionRules
        next_association:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
    specificAccess:
    - null
  description:
    modeler: It is common in models for the attacker to be granted full access on
      an Application, representing their own tools, that is connected to the Internet
      to explore possible attack vectors.
    user: Full access on the Application means the attacker has complete control of
      the application and can perform any actions within its execution context.
  name: fullAccess
  parents:
    fullAccessFromSupplyChainCompromise:
    - null
    localAccess:
    - null
    modify:
    - null
    networkAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    physicalAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - null
  description:
    developer: Intermediate attack step used to propagate physical access throughout
      application nesting.
  name: physicalAccessAchieved
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attackerUnsafeUserActivityCapabilityWithoutReverseReach:
    - null
    bypassEffectiveness:
    - AppProtection:
        fieldname: protectorIDPSs
        next_association: {}
    successfulUnsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptUnsafeUserActivity
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    unsafeUserActivity:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulUnsafeUserActivity
  parents:
    attackerUnsafeUserActivityCapability:
    - null
    attemptUnsafeUserActivity:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    localConnect:
    - null
    networkConnectUninspected:
    - null
    userInteractionAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: vulnerabilities
            next_association: {}
        right:
          AppSoftwareProduct:
            fieldname: appSoftProduct
            next_association:
              ApplicationVulnerability:
                fieldname: softProductVulnerabilities
                next_association: {}
  description:
    user: The unsafe actions of users on this application open it up to attacks and
      enable vulnerabilities that require user interaction.
  name: unsafeUserActivity
  parents:
    successfulUnsafeUserActivity:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    successfulUnsafeUserActivity:
    - null
  description:
    developer: The impacts of the user's unsafe actions are greatly limited if there
      are no channels through which the attacker can be reached by the unwitting user.
  name: attackerUnsafeUserActivityCapability
  parents:
    attackerUnsafeUserActivityCapabilityWithReverseReach:
    - null
    attackerUnsafeUserActivityCapabilityWithoutReverseReach:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    attackerUnsafeUserActivityCapability:
    - null
  description:
    developer: The attacker can be reached from this application and can therefore
      more easily exploit the unsafe user actions.
  name: attackerUnsafeUserActivityCapabilityWithReverseReach
  parents:
    attemptUnsafeUserActivity:
    - null
    reverseReach:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attackerUnsafeUserActivityCapability:
    - null
  description:
    developer: 'The attacker cannot be reached from this application. This means that
      the autonomous malicious code must either be able to do reconnaissance on the
      fly or the reconnaissance was done beforehand and coded into it. This is much
      more complex and difficult than the situation where the attacker is reachable
      from the application which restricts the capabilities of being successful. Important
      Note: This step should never directly or indirectly lead to reverse reach as
      it would fulfil the attacker interactivity requirements it is missing.'
  name: attackerUnsafeUserActivityCapabilityWithoutReverseReach
  parents:
    attemptUnsafeUserActivity:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: RoutingFirewall
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Auditing inside the supply chain can detect possible supply chain attacks.
  name: supplyChainAuditing
  parents: {}
  ttc: null
  type: defense
- asset: RoutingFirewall
  children:
    supplyChainAuditingBypassed:
    - null
  description:
    user: Supply chain auditing can be bypassed.
  name: bypassSupplyChainAuditing
  parents:
    attemptFullAccessFromSupplyChainCompromise:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: RoutingFirewall
  children:
    fullAccessFromSupplyChainCompromise:
    - null
  description:
    developer: The supply chain audit is bypassed either because it was not set or
      the attacker was able to circumvent it through additional effort.
  name: supplyChainAuditingBypassed
  parents:
    bypassSupplyChainAuditing:
    - null
    supplyChainAuditing:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    bypassSupplyChainAuditing:
    - null
    fullAccessFromSupplyChainCompromise:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptFullAccessFromSupplyChainCompromise
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    fullAccess:
    - null
  description:
    developer: Intermediate attack step.
  name: fullAccessFromSupplyChainCompromise
  parents:
    attemptFullAccessFromSupplyChainCompromise:
    - null
    notPresent:
    - null
    supplyChainAuditingBypassed:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptReadFromSoftProdVulnerability
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    modifyFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptModifyFromSoftProdVulnerability
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    denyFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDenyFromSoftProdVulnerability
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Only enable the following attacks steps if a SoftwareProduct is associated
      with this Application.
  name: softwareCheck
  parents: {}
  ttc: null
  type: exist
- asset: RoutingFirewall
  children:
    localAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityLocalAccessAchieved
  parents:
    localConnect:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    networkAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityNetworkAccessAchieved
  parents:
    networkConnectUninspected:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    physicalAccessAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityPhysicalAccessAchieved
  parents:
    physicalAccessAchieved:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    lowPrivilegesAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityLowPrivilegesAchieved
  parents:
    specificAccessAuthenticate:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    highPrivilegesAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityHighPrivilegesAchieved
  parents:
    authenticate:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    softwareProductAbuse:
    - null
    userInteractionAchieved:
    - AppSoftwareProduct:
        fieldname: appSoftProduct
        next_association:
          ApplicationVulnerability:
            fieldname: softProductVulnerabilities
            next_association: {}
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductVulnerabilityUserInteractionAchieved
  parents: {}
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    softwareProductAbuse:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: attemptSoftwareProductAbuse
  parents:
    useVulnerability:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    denyFromSoftProdVulnerability:
    - null
    modifyFromSoftProdVulnerability:
    - null
    readFromSoftProdVulnerability:
    - null
  description:
    developer: Intermediate attack step used to conditionally trigger SoftwareProduct
      vulnerabilities separately for each application.
  name: softwareProductAbuse
  parents:
    attemptSoftwareProductAbuse:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - null
    softwareProductVulnerabilityLocalAccessAchieved:
    - null
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - null
    softwareProductVulnerabilityNetworkAccessAchieved:
    - null
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - null
    softwareProductVulnerabilityUserInteractionAchieved:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptRead:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: readFromSoftProdVulnerability
  parents:
    attemptReadFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptModify:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: modifyFromSoftProdVulnerability
  parents:
    attemptModifyFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptDeny:
    - null
  description:
    developer: Intermediate attack step to handle SoftwareProduct existence.
  name: denyFromSoftProdVulnerability
  parents:
    attemptDenyFromSoftProdVulnerability:
    - null
    notPresent:
    - null
    softwareCheck:
    - null
    softwareProductAbuse:
    - null
    useVulnerability:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    successfulApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptApplicationRespondConnectThroughData
  parents:
    fullAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    applicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulApplicationRespondConnectThroughData
  parents:
    attemptApplicationRespondConnectThroughData:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptApplicationRespondConnect:
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    developer: After full access on the application received data can be used to try
      a connect through respond to the client side application.
  name: applicationRespondConnectThroughData
  parents:
    successfulApplicationRespondConnectThroughData:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAuthorizedApplicationRespondConnectThroughData
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    authorizedApplicationRespondConnectThroughData:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAuthorizedApplicationRespondConnectThroughData
  parents:
    attemptAuthorizedApplicationRespondConnectThroughData:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    authorizedApplicationRespondConnectFromApplication:
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    developer: After specific access on the application received data can be used
      to try a connect through respond to the client side application. To succeed
      the attacker must also attain write privileges on the received data.
  name: authorizedApplicationRespondConnectThroughData
  parents:
    successfulAuthorizedApplicationRespondConnectThroughData:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    successfulRead:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptRead
  parents:
    fullAccess:
    - null
    readFromSoftProdVulnerability:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    read:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulRead
  parents:
    attemptRead:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptRead:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    user: The attacker can read some or all of this service's (and executed by this)
      source code and/or data (both local and sent/received).
  name: read
  parents:
    successfulRead:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    authorizedReadFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    - ReceiveData:
        fieldname: receivedData
        next_association: {}
  description:
    user: The attacker can read the service's source code and/or sent and received
      Data, given the necessary permissions
  name: specificAccessRead
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    successfulModify:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptModify
  parents:
    fullAccess:
    - ManagedBy:
        fieldname: managerApp
        next_association: {}
    - ManagedBy:
        fieldname: managerApp
        next_association: {}
    - null
    - ManagedBy:
        fieldname: managerApp
        next_association: {}
    modifyFromSoftProdVulnerability:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    modify:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulModify
  parents:
    attemptModify:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptModify:
    - AppExecution:
        fieldname: appExecutedApps
        next_association: {}
    attemptWrite:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
    fullAccess:
    - null
  description:
    user: The attacker can modify some or all of this service's (and executed by this)
      source code and/or data.
  name: modify
  parents:
    successfulModify:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    authorizedWriteFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
  description:
    user: The attacker can modify the service's source code and/or sent  Data, given
      the necessary permissions
  name: specificAccessModify
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    successfulDeny:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptDeny
  parents:
    denyFromLockout:
    - null
    denyFromNetworkingAsset:
    - null
    denyFromSoftProdVulnerability:
    - null
    fullAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    deny:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulDeny
  parents:
    attemptDeny:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptDeny:
    - FirewallConnectionRule:
        fieldname: connectionRules
        next_association: {}
  description:
    user: A DoS attack should cascade on the connected networks and associated connections
  name: deny
  parents:
    successfulDeny:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    authorizedDeleteFromApplication:
    - AppContainment:
        fieldname: containedData
        next_association: {}
    - SendData:
        fieldname: sentData
        next_association: {}
  description:
    user: The attacker can delete some or all functionality and data pertaining to
      this application/service as well as executed applications, given the necessary
      permissions
  name: specificAccessDelete
  parents:
    specificAccess:
    - null
  ttc: null
  type: or
- asset: RoutingFirewall
  children:
    attemptDeny:
    - null
  description:
    developer: This is an intermediate attack step to only allow deny on an application
      when all the connection rules and networks associated with it are denied, because
      an app can be serving on many different ports.
  name: denyFromNetworkingAsset
  parents: {}
  ttc: null
  type: and
- asset: RoutingFirewall
  children:
    attemptDeny:
    - null
  description:
    developer: This is an intermediate attack step to only trigger deny on an application
      when all the executing access control roles are locked out.
  name: denyFromLockout
  parents: {}
  ttc: null
  type: and
- asset: ConnectionRule
  children:
    restrictedBypassed:
    - null
  description:
    user: The restricted defense can be used to probabilistically model the likelihood
      of both the protocols required by the attack being enabled or the existence
      of the ConnectionRule altogether.
  name: restricted
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: ConnectionRule
  children:
    restrictedBypassed:
    - null
  description:
    user: The restricted defense can be bypassed.
  name: bypassRestricted
  parents:
    attemptAccessNetworksInspected:
    - null
    attemptAccessNetworksUninspected:
    - null
    attemptConnectToApplicationsInspected:
    - null
    attemptConnectToApplicationsUninspected:
    - null
    attemptDeny:
    - null
    attemptReverseReach:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: ConnectionRule
  children:
    connectToApplicationsInspected:
    - null
    connectToApplicationsUninspected:
    - null
    deny:
    - null
    reverseReach:
    - null
    successfulAccessNetworksInspected:
    - null
    successfulAccessNetworksUninspected:
    - null
  description:
    developer: The restricted defense is bypassed either because it was not set, the
      attacker was able to circumvent it through additional effort.
  name: restrictedBypassed
  parents:
    bypassRestricted:
    - null
    restricted:
    - null
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    payloadInspectionBypassed:
    - null
  description:
    mitre: 'Used for M1037: Filter Network Traffic, M1021: Restrict Web-Based Content,
      M1031: Network Intrusion Prevention, M1057: Data Loss Prevention'
    user: If enabled, then the traffic is considered to be inspected and filtered
      by an IDPS that can detect and stop malicious payloads, effectively allowing
      only legitimate communication(i.e. network-level vulnerabilities cannot be exploited,
      unsafe actions that the user may taken that would benefit the attacker are also
      prevented).
  name: payloadInspection
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: ConnectionRule
  children:
    payloadInspectionBypassed:
    - null
  description:
    user: Payload inspection can be bypassed.
  name: bypassPayloadInspection
  parents:
    attemptConnectToApplicationsInspected:
    - null
    attemptConnectToApplicationsUninspected:
    - null
    attemptReverseReach:
    - null
  ttc:
    arguments: []
    name: VeryHardAndUncertain
    type: function
  type: or
- asset: ConnectionRule
  children:
    connectToApplicationsUninspected:
    - null
    reverseReach:
    - null
    successfulAccessNetworksUninspected:
    - null
  description:
    developer: Payload inspection is bypassed either because it was not set, the attacker
      was able to circumvent it through additional effort.
  name: payloadInspectionBypassed
  parents:
    bypassPayloadInspection:
    - null
    bypassPayloadInspectionFromEncryptedData:
    - intersection:
        left:
          union:
            left:
              ApplicationConnection:
                fieldname: applications
                next_association:
                  SendData:
                    fieldname: sentData
                    next_association: {}
            right:
              OutApplicationConnection:
                fieldname: outApplications
                next_association:
                  SendData:
                    fieldname: sentData
                    next_association: {}
        right:
          union:
            left:
              union:
                left:
                  NetworkConnection:
                    fieldname: networks
                    next_association:
                      DataInTransit:
                        fieldname: transitData
                        next_association: {}
                right:
                  InNetworkConnection:
                    fieldname: inNetworks
                    next_association:
                      DataInTransit:
                        fieldname: transitData
                        next_association: {}
            right:
              DiodeInNetworkConnection:
                fieldname: diodeInNetworks
                next_association:
                  DataInTransit:
                    fieldname: transitData
                    next_association: {}
    - intersection:
        left:
          union:
            left:
              ApplicationConnection:
                fieldname: applications
                next_association:
                  ReceiveData:
                    fieldname: receivedData
                    next_association: {}
            right:
              InApplicationConnection:
                fieldname: inApplications
                next_association:
                  ReceiveData:
                    fieldname: receivedData
                    next_association: {}
        right:
          union:
            left:
              NetworkConnection:
                fieldname: networks
                next_association:
                  DataInTransit:
                    fieldname: transitData
                    next_association: {}
            right:
              OutNetworkConnection:
                fieldname: outNetworks
                next_association:
                  DataInTransit:
                    fieldname: transitData
                    next_association: {}
    payloadInspection:
    - null
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    bypassPayloadInspection:
    - null
    bypassRestricted:
    - null
    reverseReach:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptReverseReach
  parents:
    reverseReach:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: inApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: inApplications
            next_association: {}
    - union:
        left:
          union:
            left:
              NetworkConnection:
                fieldname: networks
                next_association: {}
            right:
              InNetworkConnection:
                fieldname: inNetworks
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeInNetworks
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: inApplications
            next_association: {}
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    attemptReverseReach:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          NetworkConnection:
            fieldname: networks
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outNetworks
            next_association: {}
  description:
    developer: Reverse reach is used to determine whether or not the attacker can
      be reached by the user. Reverse reach propagates via outgoing or bidirectional
      communications.
  name: reverseReach
  parents:
    attemptReverseReach:
    - null
    payloadInspectionBypassed:
    - null
    restrictedBypassed:
    - null
  ttc: null
  type: and
- asset: ConnectionRule
  children:
    bypassRestricted:
    - null
    successfulAccessNetworksUninspected:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptAccessNetworksUninspected
  parents:
    accessNetworkAndConnections:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    networkForwardingUninspected:
    - union:
        left:
          NetworkConnection:
            fieldname: networks
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outNetworks
            next_association: {}
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    bypassRestricted:
    - null
    successfulAccessNetworksInspected:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptAccessNetworksInspected
  parents:
    accessNetworkAndConnections:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    networkForwardingInspected:
    - union:
        left:
          NetworkConnection:
            fieldname: networks
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outNetworks
            next_association: {}
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    accessNetworksUninspected:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAccessNetworksUninspected
  parents:
    attemptAccessNetworksUninspected:
    - null
    payloadInspectionBypassed:
    - null
    restrictedBypassed:
    - null
  ttc: null
  type: and
- asset: ConnectionRule
  children:
    accessNetworksInspected:
    - null
  description:
    developer: Intermediate attack step to model defenses.
  name: successfulAccessNetworksInspected
  parents:
    attemptAccessNetworksInspected:
    - null
    restrictedBypassed:
    - null
  ttc: null
  type: and
- asset: ConnectionRule
  children:
    accessNetworksInspected:
    - null
    accessUninspected:
    - union:
        left:
          union:
            left:
              NetworkConnection:
                fieldname: networks
                next_association: {}
            right:
              InNetworkConnection:
                fieldname: inNetworks
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeInNetworks
            next_association: {}
  description:
    developer: Access all networks that are associated with this ConnectionRule, without
      any restriction due to inspection.
  name: accessNetworksUninspected
  parents:
    successfulAccessNetworksUninspected:
    - null
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    accessInspected:
    - union:
        left:
          union:
            left:
              NetworkConnection:
                fieldname: networks
                next_association: {}
            right:
              InNetworkConnection:
                fieldname: inNetworks
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeInNetworks
            next_association: {}
  description:
    developer: Access all networks that are associated with this ConnectionRule, but
      taking into account that the traffic payload is being inspected.
  name: accessNetworksInspected
  parents:
    accessNetworksUninspected:
    - null
    successfulAccessNetworksInspected:
    - null
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    bypassPayloadInspection:
    - null
    bypassRestricted:
    - null
    connectToApplicationsUninspected:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptConnectToApplicationsUninspected
  parents:
    accessNetworkAndConnections:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    accessUninspected:
    - union:
        left:
          NetworkConnection:
            fieldname: networks
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outNetworks
            next_association: {}
    networkForwardingUninspected:
    - union:
        left:
          NetworkConnection:
            fieldname: networks
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outNetworks
            next_association: {}
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    bypassPayloadInspection:
    - null
    bypassRestricted:
    - null
    connectToApplicationsInspected:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptConnectToApplicationsInspected
  parents:
    accessInspected:
    - union:
        left:
          NetworkConnection:
            fieldname: networks
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outNetworks
            next_association: {}
    accessNetworkAndConnections:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
    networkForwardingInspected:
    - union:
        left:
          NetworkConnection:
            fieldname: networks
            next_association: {}
        right:
          OutNetworkConnection:
            fieldname: outNetworks
            next_association: {}
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    networkConnectInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: inApplications
            next_association: {}
    networkConnectUninspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: inApplications
            next_association: {}
  description:
    developer: Connect to all the (server) Applications that are associated with this
      ConnectionRule, without any restriction due to inspection.
  name: connectToApplicationsUninspected
  parents:
    attemptConnectToApplicationsUninspected:
    - null
    payloadInspectionBypassed:
    - null
    restrictedBypassed:
    - null
  ttc: null
  type: and
- asset: ConnectionRule
  children:
    networkConnectInspected:
    - union:
        left:
          ApplicationConnection:
            fieldname: applications
            next_association: {}
        right:
          InApplicationConnection:
            fieldname: inApplications
            next_association: {}
  description:
    developer: Connect to all the (server) Applications that are associated with this
      ConnectionRule, but taking into account that the traffic payload is being inspected.
      This attack step is used to allow legitimate traffic even when payload inspection
      is enabled on the connection.
  name: connectToApplicationsInspected
  parents:
    attemptConnectToApplicationsInspected:
    - null
    restrictedBypassed:
    - null
  ttc: null
  type: and
- asset: ConnectionRule
  children:
    bypassRestricted:
    - null
    deny:
    - null
  description:
    developer: Intermediate attack step to allow for defenses and trigger bypasses.
  name: attemptDeny
  parents:
    deny:
    - union:
        left:
          union:
            left:
              union:
                left:
                  NetworkConnection:
                    fieldname: networks
                    next_association: {}
                right:
                  InNetworkConnection:
                    fieldname: inNetworks
                    next_association: {}
            right:
              OutNetworkConnection:
                fieldname: outNetworks
                next_association: {}
        right:
          DiodeInNetworkConnection:
            fieldname: diodeInNetworks
            next_association: {}
    - FirewallConnectionRule:
        fieldname: routingFirewalls
        next_association: {}
  ttc: null
  type: or
- asset: ConnectionRule
  children:
    denyFromNetworkingAsset:
    - union:
        left:
          union:
            left:
              ApplicationConnection:
                fieldname: applications
                next_association: {}
            right:
              InApplicationConnection:
                fieldname: inApplications
                next_association: {}
        right:
          OutApplicationConnection:
            fieldname: outApplications
            next_association: {}
  description:
    user: If a connection rule is denied it affects the applications communicating
      over it.
  name: deny
  parents:
    attemptDeny:
    - null
    restrictedBypassed:
    - null
  ttc: null
  type: and
- asset: Vulnerability
  children:
    abuse:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    mitre: 'Used for M1049:Antivirus/Antimalware, M1050: Exploit Protection, M1040:
      Behavior Prevention on Endpoint, M1038: Execution Prevention, M1051: Update
      Software, M1016: Vulnerability Scanning, M1021: Restrict Web-Based Content,
      M1042: Disable or Remove Feature or Program, M1013: Application Developer Guidance'
    user: This defense is used to reason about the attack vectors introduced by this
      asset. This is particularly useful for vulnerabilities where it is common to
      explore the possibility of patching them out.
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: Vulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAbuse
  parents: {}
  ttc: null
  type: or
- asset: Vulnerability
  children:
    attemptExploit:
    - null
  description:
    user: The attacker is trying to abuse a vulnerability in an asset.
  name: abuse
  parents:
    attemptAbuse:
    - null
    notPresent:
    - null
  ttc: null
  type: and
- asset: Vulnerability
  children:
    exploit:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptExploit
  parents:
    abuse:
    - null
  ttc: null
  type: or
- asset: Vulnerability
  children:
    impact:
    - null
  description:
    user: Attacker is employing an exploit that makes use of this vulnerability.
  name: exploit
  parents:
    attemptExploit:
    - null
  ttc: null
  type: or
- asset: Vulnerability
  children: {}
  description:
    user: Each vulnerability has an impact (of different levels) on the vulnerable
      component.
  name: impact
  parents:
    exploit:
    - null
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    mitre: 'Used for M1049:Antivirus/Antimalware, M1050: Exploit Protection, M1040:
      Behavior Prevention on Endpoint, M1038: Execution Prevention, M1051: Update
      Software, M1016: Vulnerability Scanning, M1021: Restrict Web-Based Content,
      M1042: Disable or Remove Feature or Program, M1013: Application Developer Guidance'
    user: This defense is used to reason about the attack vectors introduced by this
      asset. This is particularly useful for vulnerabilities where it is common to
      explore the possibility of patching them out.
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
    inherentUserInteraction:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAbuse
  parents:
    useVulnerability:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    attemptExploit:
    - null
  description:
    user: The attacker is trying to abuse a vulnerability in an asset.
  name: abuse
  parents:
    attemptAbuse:
    - null
    highPrivilegesAchieved:
    - null
    localAccessAchieved:
    - null
    lowPrivilegesAchieved:
    - null
    networkAccessAchieved:
    - null
    notPresent:
    - null
    physicalAccessAchieved:
    - null
    userInteractionAchieved:
    - null
  ttc: null
  type: and
- asset: SoftwareVulnerability
  children:
    exploitTrivially:
    - null
    exploitWithEffort:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptExploit
  parents:
    abuse:
    - null
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    impact:
    - null
  description:
    user: Attacker is employing an exploit that makes use of this vulnerability.
  name: exploit
  parents:
    exploitTrivially:
    - null
    exploitWithEffort:
    - null
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    deny:
    - null
    modify:
    - null
    read:
    - null
  description:
    developer: The actual impact caused by successfully exploiting the vulnerability.
  name: impact
  parents:
    exploit:
    - null
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    networkAccessAchieved:
    - null
    softwareProductVulnerabilityNetworkAccessAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-1-1-Attack-Vector-AV
    user: Network access is required to abuse the vulnerability.
  name: networkAccessRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    localAccessAchieved:
    - null
    softwareProductVulnerabilityLocalAccessAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-1-1-Attack-Vector-AV
    user: Local access is required to abuse the vulnerability.
  name: localAccessRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    physicalAccessAchieved:
    - null
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-1-1-Attack-Vector-AV
    user: Physical access is required to abuse the vulnerability.
  name: physicalAccessRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    lowPrivilegesAchieved:
    - null
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-1-3-Privileges-Required-PR
    user: Low privileges are required to abuse the vulnerability.
  name: lowPrivilegesRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    highPrivilegesAchieved:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-1-3-Privileges-Required-PR
    user: High privileges are required to abuse the vulnerability.
  name: highPrivilegesRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    softwareProductVulnerabilityUserInteractionAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    userInteractionAchieved:
    - null
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-1-4-User-Interaction-UI
    user: Some exploits require user interaction. This defense should specify the
      probability of such interaction on the given application.
  name: userInteractionRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    read:
    - null
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-3-1-Confidentiality-C
    user: Limits the impact on confidentiality of the vulnerability.
  name: confidentialityImpactLimitations
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    deny:
    - null
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-3-3-Availability-A
    user: Limits the impact on availability of the vulnerability.
  name: availabilityImpactLimitations
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    modify:
    - null
  description:
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-3-2-Integrity-I
    user: Limits the impact on integrity of the vulnerability.
  name: integrityImpactLimitations
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    exploitTrivially:
    - null
  description:
    developer: A vulnerability that has high complexity due to its intrinsic properties
      that are beyond the attacker's control.
    modeler: https://www.first.org/cvss/v3.1/specification-document#2-1-2-Attack-Complexity-AC
    user: The vulnerability relies on a high complexity exploit that requires the
      attacker to expend additional effort (time) in order to successfully make use
      of it.
  name: highComplexityExploitRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: SoftwareVulnerability
  children:
    softwareProductVulnerabilityUserInteractionAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    userInteractionAchieved:
    - null
  description:
    modeler: Different software vulnerabilities that require user interaction to exploit
      can vary substantially in how likely those interactions are. They can range
      from simply using a shortcut or starting a service to enabling very specific
      features that the user would never perform without attacker influence. The probability
      assigned to this attack step should be tuned to fit the description of the vulnerability.
    user: The user may fulfil the user interaction requirement through their regular
      activities, without requiring the attacker to induce them to do so.
  name: inherentUserInteraction
  parents:
    attemptAbuse:
    - null
  ttc:
    arguments: []
    name: HardAndUncertain
    type: function
  type: or
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to model network access requirement.
  name: networkAccessAchieved
  parents:
    networkAccessRequired:
    - null
    networkConnectUninspected:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    softwareProductVulnerabilityNetworkAccessAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to model local access requirement.
  name: localAccessAchieved
  parents:
    localAccessRequired:
    - null
    localConnect:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    softwareProductVulnerabilityLocalAccessAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to model physical access requirement.
  name: physicalAccessAchieved
  parents:
    physicalAccessAchieved:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    physicalAccessRequired:
    - null
    softwareProductVulnerabilityPhysicalAccessAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to model low privileges requirement.
  name: lowPrivilegesAchieved
  parents:
    lowPrivilegesRequired:
    - null
    softwareProductVulnerabilityLowPrivilegesAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    specificAccessAuthenticate:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to model high privileges requirement.
  name: highPrivilegesAchieved
  parents:
    authenticate:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    highPrivilegesRequired:
    - null
    softwareProductVulnerabilityHighPrivilegesAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to model user interaction requirement.
  name: userInteractionAchieved
  parents:
    inherentUserInteraction:
    - null
    softwareProductVulnerabilityUserInteractionAchieved:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association:
          AppSoftwareProduct:
            fieldname: softApplications
            next_association: {}
    unsafeUserActivity:
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    - union:
        left:
          ApplicationVulnerability:
            fieldname: application
            next_association: {}
        right:
          ApplicationVulnerability:
            fieldname: softwareProduct
            next_association:
              AppSoftwareProduct:
                fieldname: softApplications
                next_association: {}
    userInteractionRequired:
    - null
  ttc: null
  type: or
- asset: SoftwareVulnerability
  children:
    read:
    - ApplicationVulnerability:
        fieldname: application
        next_association: {}
    readApplications:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association: {}
  description:
    user: The attacker can read some or all of the associated applications's code
      and data.
  name: read
  parents:
    confidentialityImpactLimitations:
    - null
    impact:
    - null
  ttc: null
  type: and
- asset: SoftwareVulnerability
  children:
    modify:
    - ApplicationVulnerability:
        fieldname: application
        next_association: {}
    modifyApplications:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association: {}
  description:
    user: The attacker can modify some or all of the associated application's data
      and/or source code.
  name: modify
  parents:
    impact:
    - null
    integrityImpactLimitations:
    - null
  ttc: null
  type: and
- asset: SoftwareVulnerability
  children:
    deny:
    - ApplicationVulnerability:
        fieldname: application
        next_association: {}
    denyApplications:
    - ApplicationVulnerability:
        fieldname: softwareProduct
        next_association: {}
  description:
    user: Denial-of-Service attack is an attack in which an application is rendered
      unavailable to its intended users by temporarily or indefinitely disrupting
      it.
  name: deny
  parents:
    availabilityImpactLimitations:
    - null
    impact:
    - null
  ttc: null
  type: and
- asset: SoftwareVulnerability
  children:
    exploit:
    - null
  description:
    developer: The exploit is trivial and requires insignificant effort from the attacker
      in order to be successful.
  name: exploitTrivially
  parents:
    attemptExploit:
    - null
    highComplexityExploitRequired:
    - null
  ttc: null
  type: and
- asset: SoftwareVulnerability
  children:
    exploit:
    - null
  description:
    developer: The attacker must expend effort in order to successfully exploit the
      vulnerability.
  name: exploitWithEffort
  parents:
    attemptExploit:
    - null
  ttc:
    arguments:
    - 0.01
    name: Exponential
    type: function
  type: and
- asset: HardwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Enabling this defense should make the asset behave as if it did not
      exist, as such all of its impactful attack steps should be disabled by it.
    mitre: 'Used for M1049:Antivirus/Antimalware, M1050: Exploit Protection, M1040:
      Behavior Prevention on Endpoint, M1038: Execution Prevention, M1051: Update
      Software, M1016: Vulnerability Scanning, M1021: Restrict Web-Based Content,
      M1042: Disable or Remove Feature or Program, M1013: Application Developer Guidance'
    user: This defense is used to reason about the attack vectors introduced by this
      asset. This is particularly useful for vulnerabilities where it is common to
      explore the possibility of patching them out.
  name: notPresent
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: HardwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptAbuse
  parents:
    useVulnerability:
    - hardwareVulnerability:
        fieldname: hardware
        next_association: {}
  ttc: null
  type: or
- asset: HardwareVulnerability
  children:
    attemptExploit:
    - null
  description:
    user: The attacker is trying to abuse a vulnerability in an asset.
  name: abuse
  parents:
    attemptAbuse:
    - null
    notPresent:
    - null
    physicalAccessAchieved:
    - null
  ttc: null
  type: and
- asset: HardwareVulnerability
  children:
    exploitTrivially:
    - null
    exploitWithEffort:
    - null
  description:
    developer: Intermediate attack step to allow for defenses.
  name: attemptExploit
  parents:
    abuse:
    - null
  ttc: null
  type: or
- asset: HardwareVulnerability
  children:
    impact:
    - null
  description:
    user: Attacker is employing an exploit that makes use of this vulnerability.
  name: exploit
  parents:
    exploitTrivially:
    - null
    exploitWithEffort:
    - null
  ttc: null
  type: or
- asset: HardwareVulnerability
  children:
    deny:
    - null
    modify:
    - null
    read:
    - null
  description:
    developer: The actual impact caused by successfully exploiting the vulnerability.
  name: impact
  parents:
    exploit:
    - null
  ttc: null
  type: or
- asset: HardwareVulnerability
  children:
    physicalAccessAchieved:
    - null
  description:
    modeler: Some hardware vulnerabilities require physical access to the components,
      while some can be exploited from software.
    user: Physical access is required to abuse the vulnerability.
  name: physicalAccessRequired
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: HardwareVulnerability
  children:
    read:
    - null
  description:
    modeler: Analogous defense to the SoftwareVulnerability impact limitations.
    user: Limits the impact on confidentiality of the vulnerability.
  name: confidentialityImpactLimitations
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: HardwareVulnerability
  children:
    deny:
    - null
  description:
    modeler: Analogous defense to the SoftwareVulnerability impact limitations.
    user: Limits the impact on availability of the vulnerability.
  name: availabilityImpactLimitations
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: HardwareVulnerability
  children:
    modify:
    - null
  description:
    modeler: Analogous defense to the SoftwareVulnerability impact limitations.
    user: Limits the impact on integrity of the vulnerability.
  name: integrityImpactLimitations
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: HardwareVulnerability
  children:
    exploitTrivially:
    - null
  description:
    modeler: The expectation is that the attacker has prolonged or recurring access
      to the targeted hardware in order to repeatedly/continuously try the exploit.
    user: The vulnerability requires additional effort(time) from the attacker in
      order to be successful.
  name: effortRequiredToExploit
  parents: {}
  ttc:
    arguments: []
    name: Disabled
    type: function
  type: defense
- asset: HardwareVulnerability
  children:
    abuse:
    - null
  description:
    developer: Intermediate attack step to model physical access requirement.
  name: physicalAccessAchieved
  parents:
    hardwareModifications:
    - hardwareVulnerability:
        fieldname: hardware
        next_association: {}
    physicalAccessRequired:
    - null
  ttc: null
  type: or
- asset: HardwareVulnerability
  children:
    read:
    - hardwareVulnerability:
        fieldname: hardware
        next_association: {}
  description:
    user: The attacker can read some or all of the associated hardware's data.
  name: read
  parents:
    confidentialityImpactLimitations:
    - null
    impact:
    - null
  ttc: null
  type: and
- asset: HardwareVulnerability
  children:
    modify:
    - hardwareVulnerability:
        fieldname: hardware
        next_association: {}
  description:
    user: The attacker can modify some or all of the associated hardware's behaviour.
  name: modify
  parents:
    impact:
    - null
    integrityImpactLimitations:
    - null
  ttc: null
  type: and
- asset: HardwareVulnerability
  children:
    deny:
    - hardwareVulnerability:
        fieldname: hardware
        next_association: {}
  description:
    user: Denial-of-Service attack is an attack in which a machine or hardware component
      is rendered unavailable to its intended users by temporarily or indefinitely
      disrupting it.
  name: deny
  parents:
    availabilityImpactLimitations:
    - null
    impact:
    - null
  ttc: null
  type: and
- asset: HardwareVulnerability
  children:
    exploit:
    - null
  description:
    developer: The exploit is trivial and requires insignificant effort from the attacker
      in order to be successful.
  name: exploitTrivially
  parents:
    attemptExploit:
    - null
    effortRequiredToExploit:
    - null
  ttc: null
  type: and
- asset: HardwareVulnerability
  children:
    exploit:
    - null
  description:
    developer: The attacker must expend effort in order to successfully exploit the
      vulnerability.
  name: exploitWithEffort
  parents:
    attemptExploit:
    - null
  ttc:
    arguments:
    - 0.01
    name: Exponential
    type: function
  type: and
